This is guile.info, produced by makeinfo version 4.7 from guile.texi.

INFO-DIR-SECTION The Algorithmic Language Scheme
START-INFO-DIR-ENTRY
* Guile Reference: (guile).     The Guile reference manual.
END-INFO-DIR-ENTRY

   Guile Reference Manual Copyright (C) 1996 Free Software Foundation
Copyright (C) 1997 Free Software Foundation
Copyright (C) 2000 Free Software Foundation
Copyright (C) 2001 Free Software Foundation
Copyright (C) 2002 Free Software Foundation Copyright (C) 2004 Free
Software Foundation

   Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

   Permission is granted to copy and distribute modified versions of
this manual under the conditions for verbatim copying, provided that
the entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

   Permission is granted to copy and distribute translations of this
manual into another language, under the above conditions for modified
versions, except that this permission notice may be stated in a
translation approved by the Free Software Foundation.


File: guile.info,  Node: SRFI-4 - Procedures,  Prev: SRFI-4 - Read Syntax,  Up: SRFI-4

39.5.2 SRFI-4 Procedures
------------------------

The procedures listed in this section are provided for all homogeneous
numeric vector datatypes.  For brevity, they are not all documented,
but a summary of the procedures is given.  In the following
descriptions, you can replace `TAG' by any of the datatype indicators
`u8', `s8', `u16', `s16', `u32', `s32', `u64', `s64', `f32' and `f64'.

   For example, you can use the procedures `u8vector?',
`make-s8vector', `u16vector', `u32vector-length', `s64vector-ref',
`f32vector-set!' or `f64vector->list'.

 -- Scheme Procedure: TAGvector? obj
     Return `#t' if OBJ is a homogeneous numeric vector of type `TAG'.

 -- Scheme Procedure: make-TAGvector n [value]
     Create a newly allocated homogeneous numeric vector of type `TAG',
     which can hold N elements.  If VALUE is given, the vector is
     initialized with the value, otherwise, the contents of the
     returned vector is not specified.

 -- Scheme Procedure: TAGvector value1 ...
     Create a newly allocated homogeneous numeric vector of type `TAG'.
     The returned vector is as long as the number of arguments given,
     and is initialized with the argument values.

 -- Scheme Procedure: TAGvector-length TAGvec
     Return the number of elements in TAGVEC.

 -- Scheme Procedure: TAGvector-ref TAGvec i
     Return the element at index I in TAGVEC.

 -- Scheme Procedure: TAGvector-ref TAGvec i value
     Set the element at index I in TAGVEC to VALUE.  The return value
     is not specified.

 -- Scheme Procedure: TAGvector->list TAGvec
     Return a newly allocated list holding all elements of TAGVEC.

 -- Scheme Procedure: list->TAGvector lst
     Return a newly allocated homogeneous numeric vector of type `TAG',
     initialized with the elements of the list LST.


File: guile.info,  Node: SRFI-6,  Next: SRFI-8,  Prev: SRFI-4,  Up: SRFI Support

39.6 SRFI-6 - Basic String Ports
================================

SRFI-6 defines the procedures `open-input-string', `open-output-string'
and `get-output-string'.  These procedures are included in the Guile
core, so using this module does not make any difference at the moment.
But it is possible that support for SRFI-6 will be factored out of the
core library in the future, so using this module does not hurt, after
all.


File: guile.info,  Node: SRFI-8,  Next: SRFI-9,  Prev: SRFI-6,  Up: SRFI Support

39.7 SRFI-8 - receive
=====================

`receive' is a syntax for making the handling of multiple-value
procedures easier.  It is documented in *Note Multiple Values::.


File: guile.info,  Node: SRFI-9,  Next: SRFI-10,  Prev: SRFI-8,  Up: SRFI Support

39.8 SRFI-9 - define-record-type
================================

This is the SRFI way for defining record types.  The Guile
implementation is a layer above Guile's normal record construction
procedures (*note Records::).  The nice thing about this kind of record
definition method is that no new names are implicitly created, all
constructor, accessor and predicates are explicitly given.  This reduces
the risk of variable capture.

   The syntax of a record type definition is:

     <record type definition>
       -> (define-record-type <type name>
            (<constructor name> <field tag> ...)
            <predicate name>
            <field spec> ...)
     <field spec> -> (<field tag> <accessor name>)
                  -> (<field tag> <accessor name> <modifier name>)
     <field tag>  -> <identifier>
     <... name>   -> <identifier>

   Usage example:

     guile> (use-modules (srfi srfi-9))
     guile> (define-record-type :foo (make-foo x) foo?
                                (x get-x) (y get-y set-y!))
     guile> (define f (make-foo 1))
     guile> f
     #<:foo x: 1 y: #f>
     guile> (get-x f)
     1
     guile> (set-y! f 2)
     2
     guile> (get-y f)
     2
     guile> f
     #<:foo x: 1 y: 2>
     guile> (foo? f)
     #t
     guile> (foo? 1)
     #f


File: guile.info,  Node: SRFI-10,  Next: SRFI-11,  Prev: SRFI-9,  Up: SRFI Support

39.9 SRFI-10 - Hash-Comma Reader Extension
==========================================

The module `(srfi srfi-10)' implements the syntax extension `#,()',
also called hash-comma, which is defined in SRFI-10.

   The support for SRFI-10 consists of the procedure
`define-reader-ctor' for defining new reader constructors and the read
syntax form

     #,(CTOR DATUM ...)

   where CTOR must be a symbol for which a read constructor was defined
previously, using `define-reader-ctor'.

   Example:

     (define-reader-ctor 'file open-input-file)
     (define f '#,(file "/etc/passwd"))
     (read-line f)
     =>
     "root:x:0:0:root:/root:/bin/bash"

   Please note the quote before the `#,(file ...)' expression.  This is
necessary because ports are not self-evaluating in Guile.

 -- Scheme Procedure: define-reader-ctor symbol proc
     Define PROC as the reader constructor for hash-comma forms with a
     tag SYMBOL.  PROC will be applied to the datum(s) following the
     tag in the hash-comma expression after the complete form has been
     read in.  The result of PROC is returned by the Scheme reader.


File: guile.info,  Node: SRFI-11,  Next: SRFI-13,  Prev: SRFI-10,  Up: SRFI Support

39.10 SRFI-11 - let-values
==========================

This module implements the binding forms for multiple values
`let-values' and `let-values*'.  These forms are similar to `let' and
`let*' (*note Local Bindings::), but they support binding of the values
returned by multiple-valued expressions.

   Write `(use-modules (srfi srfi-11))' to make the bindings available.

     (let-values (((x y) (values 1 2))
                  ((z f) (values 3 4)))
        (+ x y z f))
     =>
     10

   `let-values' performs all bindings simultaneously, which means that
no expression in the binding clauses may refer to variables bound in the
same clause list.  `let-values*', on the other hand, performs the
bindings sequentially, just like `let*' does for single-valued
expressions.


File: guile.info,  Node: SRFI-13,  Next: SRFI-14,  Prev: SRFI-11,  Up: SRFI Support

39.11 SRFI-13 - String Library
==============================

In this section, we will describe all procedures defined in SRFI-13
(string library) and implemented by the module `(srfi srfi-13)'.

   Note that only the procedures from SRFI-13 are documented here which
are not already contained in Guile.  For procedures not documented here
please refer to the relevant chapters in the Guile Reference Manual, for
example the documentation of strings and string procedures (*note
Strings::).

   All of the procedures defined in SRFI-13, which are not already
included in the Guile core library, are implemented in the module
`(srfi srfi-13)'.  The procedures which are both in Guile and in
SRFI-13 are slightly extended in this module.  Their bindings overwrite
those in the Guile core.

   The procedures which are defined in the section _Low-level
procedures_ of SRFI-13 for parsing optional string indices, substring
specification checking and Knuth-Morris-Pratt-Searching are not
implemented.

   The procedures `string-contains' and `string-contains-ci' are not
implemented very efficiently at the moment.  This will be changed as
soon as possible.

* Menu:

* Loading SRFI-13::             How to load SRFI-13 support.
* SRFI-13 Predicates::          String predicates.
* SRFI-13 Constructors::        String constructing procedures.
* SRFI-13 List/String Conversion::  Conversion from/to lists.
* SRFI-13 Selection::           Selection portions of strings.
* SRFI-13 Modification::        Modify strings in-place.
* SRFI-13 Comparison::          Compare strings.
* SRFI-13 Prefixes/Suffixes::   Detect common pre-/suffixes.
* SRFI-13 Searching::           Searching for substrings.
* SRFI-13 Case Mapping::        Mapping to lower-/upper-case.
* SRFI-13 Reverse/Append::      Reverse and append strings.
* SRFI-13 Fold/Unfold/Map::     Construct/deconstruct strings.
* SRFI-13 Replicate/Rotate::    Replicate and rotate portions of strings.
* SRFI-13 Miscellaneous::       Left-over string procedures.
* SRFI-13 Filtering/Deleting::  Filter and delete characters from strings.


File: guile.info,  Node: Loading SRFI-13,  Next: SRFI-13 Predicates,  Up: SRFI-13

39.11.1 Loading SRFI-13
-----------------------

When Guile is properly installed, SRFI-13 support can be loaded into a
running Guile by using the `(srfi srfi-13)' module.

     $ guile
     guile> (use-modules (srfi srfi-13))
     guile>

   When this step causes any errors, Guile is not properly installed.

   One possible reason is that Guile cannot find either the Scheme
module file `srfi-13.scm', or it cannot find the shared object file
`libguile-srfi-srfi-13-14.so'.  Make sure that the former is in the
Guile load path and that the latter is either installed in some default
location like `/usr/local/lib' or that the directory it was installed
to is in your `LTDL_LIBRARY_PATH'.  The same applies to `srfi-14.scm'.

   Now you can test whether the SRFI-13 procedures are working by
calling the `string-concatenate' procedure.

     guile> (string-concatenate '("Hello" " " "World!"))
     "Hello World!"


File: guile.info,  Node: SRFI-13 Predicates,  Next: SRFI-13 Constructors,  Prev: Loading SRFI-13,  Up: SRFI-13

39.11.2 Predicates
------------------

In addition to the primitives `string?' and `string-null?', which are
already in the Guile core, the string predicates `string-any' and
`string-every' are defined by SRFI-13.

 -- Scheme Procedure: string-any char_pred s [start end]
     Return true if `char_pred' is satisfied for any character in the
     string S.  CHAR_PRED can be

        * A character, to to test for any in S equal to that.

        * A character set (*note SRFI-14::), to test for any character
          in S in that character set.

        * A predicate function, called as `(CHAR_PRED c)' for each
          character in S, from left to right, to test for any on which
          CHAR_PRED returns true.

          When CHAR_PRED does return true (ie. non-`#f'), that value is
          the value returned by `string-any'.

     If there are no characters in S (ie. START equals END) then the
     return is `#f'.

     SRFI-13 specifies that when CHAR_PRED is a predicate function, the
     call on the last character of S (assuming that point is reached)
     is a tail call, but currently in Guile this is not the case.

 -- Scheme Procedure: string-every char_pred s [start end]
     Return true if CHAR_PRED is satisifed for every character in the
     string S.  CHAR_PRED can be

        * A character, to to test for every character in S equal to
          that.

        * A character set (*note SRFI-14::), to test for every
          character in S being in that character set.

        * A predicate function, called as `(CHAR_PRED c)' for each
          character in S, from left to right, to test that it returns
          true for every character in S.

          When CHAR_PRED does return true (ie. non-`#f') for every
          character, the return from the last call is the value
          returned by `string-every'.

     If there are no characters in S (ie. START equals END) then the
     return is `#t'.

     SRFI-13 specifies that when CHAR_PRED is a predicate function, the
     call on the last character of S (assuming that point is reached)
     is a tail call, but currently in Guile this is not the case.


File: guile.info,  Node: SRFI-13 Constructors,  Next: SRFI-13 List/String Conversion,  Prev: SRFI-13 Predicates,  Up: SRFI-13

39.11.3 Constructors
--------------------

SRFI-13 defines several procedures for constructing new strings.  In
addition to `make-string' and `string' (available in the Guile core
library), the procedure `string-tabulate' does exist.

 -- Scheme Procedure: string-tabulate proc len
     PROC is an integer->char procedure.  Construct a string of size
     LEN by applying PROC to each index to produce the corresponding
     string element.  The order in which PROC is applied to the indices
     is not specified.


File: guile.info,  Node: SRFI-13 List/String Conversion,  Next: SRFI-13 Selection,  Prev: SRFI-13 Constructors,  Up: SRFI-13

39.11.4 List/String Conversion
------------------------------

The procedure `string->list' is extended by SRFI-13, that is why it is
included in `(srfi srfi-13)'.  The other procedures are new.  The Guile
core already contains the procedure `list->string' for converting a
list of characters into a string (*note List/String Conversion::).

 -- Scheme Procedure: string->list str [start end]
     Convert the string STR into a list of characters.

 -- Scheme Procedure: reverse-list->string chrs
     An efficient implementation of `(compose string->list reverse)':

          (reverse-list->string '(#\a #\B #\c)) => "cBa"

 -- Scheme Procedure: string-join ls [delimiter grammar]
     Append the string in the string list LS, using the string DELIM as
     a delimiter between the elements of LS.  GRAMMAR is a symbol which
     specifies how the delimiter is placed between the strings, and
     defaults to the symbol `infix'.

    `infix'
          Insert the separator between list elements.  An empty string
          will produce an empty list.

    `string-infix'
          Like `infix', but will raise an error if given the empty list.

    `suffix'
          Insert the separator after every list element.

    `prefix'
          Insert the separator before each list element.


File: guile.info,  Node: SRFI-13 Selection,  Next: SRFI-13 Modification,  Prev: SRFI-13 List/String Conversion,  Up: SRFI-13

39.11.5 Selection
-----------------

These procedures are called "selectors", because they access
information about the string or select pieces of a given string.

   Additional selector procedures are documented in the Strings section
(*note String Selection::), like `string-length' or `string-ref'.

   `string-copy' is also available in core Guile, but this version
accepts additional start/end indices.

 -- Scheme Procedure: string-copy str [start end]
     Return a freshly allocated copy of the string STR.  If given,
     START and END delimit the portion of STR which is copied.

 -- Scheme Procedure: substring/shared str start [end]
     Like `substring', but the result may share memory with the
     argument STR.

 -- Scheme Procedure: string-copy! target tstart s [start end]
     Copy the sequence of characters from index range [START, END) in
     string S to string TARGET, beginning at index TSTART.  The
     characters are copied left-to-right or right-to-left as needed -
     the copy is guaranteed to work, even if TARGET and S are the same
     string.  It is an error if the copy operation runs off the end of
     the target string.

 -- Scheme Procedure: string-take s n
 -- Scheme Procedure: string-take-right s n
     Return the N first/last characters of S.

 -- Scheme Procedure: string-drop s n
 -- Scheme Procedure: string-drop-right s n
     Return all but the first/last N characters of S.

 -- Scheme Procedure: string-pad s len [chr start end]
 -- Scheme Procedure: string-pad-right s len [chr start end]
     Take that characters from START to END from the string S and
     return a new string, right(left)-padded by the character CHR to
     length LEN.  If the resulting string is longer than LEN, it is
     truncated on the right (left).

 -- Scheme Procedure: string-trim s [char_pred start end]
 -- Scheme Procedure: string-trim-right s [char_pred start end]
 -- Scheme Procedure: string-trim-both s [char_pred start end]
     Trim S by skipping over all characters on the left/right/both
     sides of the string that satisfy the parameter CHAR_PRED:

        * if it is the character CH, characters equal to CH are trimmed,

        * if it is a procedure PRED characters that satisfy PRED are
          trimmed,

        * if it is a character set, characters in that set are trimmed.

     If called without a CHAR_PRED argument, all whitespace is trimmed.


File: guile.info,  Node: SRFI-13 Modification,  Next: SRFI-13 Comparison,  Prev: SRFI-13 Selection,  Up: SRFI-13

39.11.6 Modification
--------------------

The procedure `string-fill!' is extended from R5RS because it accepts
optional start/end indices.  This bindings shadows the procedure of the
same name in the Guile core.  The second modification procedure
`string-set!' is documented in the Strings section (*note String
Modification::).

 -- Scheme Procedure: string-fill! str chr [start end]
     Stores CHR in every element of the given STR and returns an
     unspecified value.


File: guile.info,  Node: SRFI-13 Comparison,  Next: SRFI-13 Prefixes/Suffixes,  Prev: SRFI-13 Modification,  Up: SRFI-13

39.11.7 Comparison
------------------

The procedures in this section are used for comparing strings in
different ways.  The comparison predicates differ from those in R5RS in
that they do not only return `#t' or `#f', but the mismatch index in
the case of a true return value.

   `string-hash' and `string-hash-ci' are for calculating hash values
for strings, useful for implementing fast lookup mechanisms.

 -- Scheme Procedure: string-compare s1 s2 proc_lt proc_eq proc_gt
          [start1 end1 start2 end2]
 -- Scheme Procedure: string-compare-ci s1 s2 proc_lt proc_eq proc_gt
          [start1 end1 start2 end2]
     Apply PROC_LT, PROC_EQ, PROC_GT to the mismatch index, depending
     upon whether S1 is less than, equal to, or greater than S2.  The
     mismatch index is the largest index I such that for every 0 <= J <
     I, S1[J] = S2[J] - that is, I is the first position that does not
     match.  The character comparison is done case-insensitively.

 -- Scheme Procedure: string= s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string<> s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string< s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string> s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string<= s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string>= s1 s2 [start1 end1 start2 end2]
     Compare S1 and S2 and return `#f' if the predicate fails.
     Otherwise, the mismatch index is returned (or END1 in the case of
     `string='.

 -- Scheme Procedure: string-ci= s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string-ci<> s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string-ci< s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string-ci> s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string-ci<= s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string-ci>= s1 s2 [start1 end1 start2 end2]
     Compare S1 and S2 and return `#f' if the predicate fails.
     Otherwise, the mismatch index is returned (or END1 in the case of
     `string='.  These are the case-insensitive variants.

 -- Scheme Procedure: string-hash s [bound start end]
 -- Scheme Procedure: string-hash-ci s [bound start end]
     Return a hash value of the string S in the range 0 ...  BOUND - 1.
     `string-hash-ci' is the case-insensitive variant.


File: guile.info,  Node: SRFI-13 Prefixes/Suffixes,  Next: SRFI-13 Searching,  Prev: SRFI-13 Comparison,  Up: SRFI-13

39.11.8 Prefixes/Suffixes
-------------------------

Using these procedures you can determine whether a given string is a
prefix or suffix of another string or how long a common prefix/suffix
is.

 -- Scheme Procedure: string-prefix-length s1 s2 [start1 end1 start2
          end2]
 -- Scheme Procedure: string-prefix-length-ci s1 s2 [start1 end1 start2
          end2]
 -- Scheme Procedure: string-suffix-length s1 s2 [start1 end1 start2
          end2]
 -- Scheme Procedure: string-suffix-length-ci s1 s2 [start1 end1 start2
          end2]
     Return the length of the longest common prefix/suffix of the two
     strings. `string-prefix-length-ci' and `string-suffix-length-ci'
     are the case-insensitive variants.

 -- Scheme Procedure: string-prefix? s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string-prefix-ci? s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string-suffix? s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string-suffix-ci? s1 s2 [start1 end1 start2 end2]
     Is S1 a prefix/suffix of S2. `string-prefix-ci?' and
     `string-suffix-ci?' are the case-insensitive variants.


File: guile.info,  Node: SRFI-13 Searching,  Next: SRFI-13 Case Mapping,  Prev: SRFI-13 Prefixes/Suffixes,  Up: SRFI-13

39.11.9 Searching
-----------------

Use these procedures to find out whether a string contains a given
character or a given substring, or a character from a set of characters.

 -- Scheme Procedure: string-index s char_pred [start end]
 -- Scheme Procedure: string-index-right s char_pred [start end]
     Search through the string S from left to right (right to left),
     returning the index of the first (last) occurrence of a character
     which

        * equals CHAR_PRED, if it is character,

        * satisfies the predicate CHAR_PRED, if it is a procedure,

        * is in the set CHAR_PRED, if it is a character set.

 -- Scheme Procedure: string-skip s char_pred [start end]
 -- Scheme Procedure: string-skip-right s char_pred [start end]
     Search through the string S from left to right (right to left),
     returning the index of the first (last) occurrence of a character
     which

        * does not equal CHAR_PRED, if it is character,

        * does not satisfy the predicate CHAR_PRED, if it is a
          procedure.

        * is not in the set if CHAR_PRED is a character set.

 -- Scheme Procedure: string-count s char_pred [start end]
     Return the count of the number of characters in the string S which

        * equals CHAR_PRED, if it is character,

        * satisfies the predicate CHAR_PRED, if it is a procedure.

        * is in the set CHAR_PRED, if it is a character set.

 -- Scheme Procedure: string-contains s1 s2 [start1 end1 start2 end2]
 -- Scheme Procedure: string-contains-ci s1 s2 [start1 end1 start2 end2]
     Does string S1 contain string S2?  Return the index in S1 where S2
     occurs as a substring, or false.  The optional start/end indices
     restrict the operation to the indicated substrings.

     `string-contains-ci' is the case-insensitive variant.


File: guile.info,  Node: SRFI-13 Case Mapping,  Next: SRFI-13 Reverse/Append,  Prev: SRFI-13 Searching,  Up: SRFI-13

39.11.10 Alphabetic Case Mapping
--------------------------------

These procedures convert the alphabetic case of strings.  They are
similar to the procedures in the Guile core, but are extended to handle
optional start/end indices.

 -- Scheme Procedure: string-upcase s [start end]
 -- Scheme Procedure: string-upcase! s [start end]
     Upcase every character in S.  `string-upcase!' is the
     side-effecting variant.

 -- Scheme Procedure: string-downcase s [start end]
 -- Scheme Procedure: string-downcase! s [start end]
     Downcase every character in S.  `string-downcase!' is the
     side-effecting variant.

 -- Scheme Procedure: string-titlecase s [start end]
 -- Scheme Procedure: string-titlecase! s [start end]
     Upcase every first character in every word in S, downcase the
     other characters.  `string-titlecase!' is the side-effecting
     variant.


File: guile.info,  Node: SRFI-13 Reverse/Append,  Next: SRFI-13 Fold/Unfold/Map,  Prev: SRFI-13 Case Mapping,  Up: SRFI-13

39.11.11 Reverse/Append
-----------------------

One appending procedure, `string-append' is the same in R5RS and in
SRFI-13, so it is not redefined.

 -- Scheme Procedure: string-reverse str [start end]
 -- Scheme Procedure: string-reverse! str [start end]
     Reverse the string STR.  The optional arguments START and END
     delimit the region of STR to operate on.

     `string-reverse!' modifies the argument string and returns an
     unspecified value.

 -- Scheme Procedure: string-append/shared ls ...
     Like `string-append', but the result may share memory with the
     argument strings.

 -- Scheme Procedure: string-concatenate ls
     Append the elements of LS (which must be strings) together into a
     single string.  Guaranteed to return a freshly allocated string.

 -- Scheme Procedure: string-concatenate/shared ls
     Like `string-concatenate', but the result may share memory with
     the strings in the list LS.

 -- Scheme Procedure: string-concatenate-reverse ls final_string end
     Without optional arguments, this procedure is equivalent to

          (string-concatenate (reverse ls))

     If the optional argument FINAL_STRING is specified, it is consed
     onto the beginning to LS before performing the list-reverse and
     string-concatenate operations.  If END is given, only the
     characters of FINAL_STRING up to index END are used.

     Guaranteed to return a freshly allocated string.

 -- Scheme Procedure: string-concatenate-reverse/shared ls final_string
          end
     Like `string-concatenate-reverse', but the result may share memory
     with the the strings in the LS arguments.


File: guile.info,  Node: SRFI-13 Fold/Unfold/Map,  Next: SRFI-13 Replicate/Rotate,  Prev: SRFI-13 Reverse/Append,  Up: SRFI-13

39.11.12 Fold/Unfold/Map
------------------------

`string-map', `string-for-each' etc. are for iterating over the
characters a string is composed of.  The fold and unfold procedures are
list iterators and constructors.

 -- Scheme Procedure: string-map proc s [start end]
     PROC is a char->char procedure, it is mapped over S.  The order in
     which the procedure is applied to the string elements is not
     specified.

 -- Scheme Procedure: string-map! proc s [start end]
     PROC is a char->char procedure, it is mapped over S.  The order in
     which the procedure is applied to the string elements is not
     specified.  The string S is modified in-place, the return value is
     not specified.

 -- Scheme Procedure: string-fold kons knil s [start end]
 -- Scheme Procedure: string-fold-right kons knil s [start end]
     Fold KONS over the characters of S, with KNIL as the terminating
     element, from left to right (or right to left, for
     `string-fold-right').  KONS must expect two arguments: The actual
     character and the last result of KONS' application.

 -- Scheme Procedure: string-unfold p f g seed [base make_final]
 -- Scheme Procedure: string-unfold-right p f g seed [base make_final]
     These are the fundamental string constructors.
        * G is used to generate a series of _seed_ values from the
          initial SEED: SEED, (G SEED), (G^2 SEED), (G^3 SEED), ...

        * P tells us when to stop - when it returns true when applied
          to one of these seed values.

        * F maps each seed value to the corresponding character in the
          result string.  These chars are assembled into the string in
          a left-to-right (right-to-left) order.

        * BASE is the optional initial/leftmost (rightmost)  portion of
          the constructed string; it default to the empty string.

        * MAKE_FINAL is applied to the terminal seed value (on which P
          returns true) to produce the final/rightmost (leftmost)
          portion of the constructed string.  It defaults to `(lambda
          (x) "")'.

 -- Scheme Procedure: string-for-each proc s [start end]
     PROC is mapped over S in left-to-right order.  The return value is
     not specified.


File: guile.info,  Node: SRFI-13 Replicate/Rotate,  Next: SRFI-13 Miscellaneous,  Prev: SRFI-13 Fold/Unfold/Map,  Up: SRFI-13

39.11.13 Replicate/Rotate
-------------------------

These procedures are special substring procedures, which can also be
used for replicating strings.  They are a bit tricky to use, but
consider this code fragment, which replicates the input string `"foo"'
so often that the resulting string has a length of six.

     (xsubstring "foo" 0 6)
     =>
     "foofoo"

 -- Scheme Procedure: xsubstring s from [to start end]
     This is the _extended substring_ procedure that implements
     replicated copying of a substring of some string.

     S is a string, START and END are optional arguments that demarcate
     a substring of S, defaulting to 0 and the length of S.  Replicate
     this substring up and down index space, in both the positive and
     negative directions.  `xsubstring' returns the substring of this
     string beginning at index FROM, and ending at TO, which defaults
     to FROM + (END - START).

 -- Scheme Procedure: string-xcopy! target tstart s sfrom [sto start
          end]
     Exactly the same as `xsubstring', but the extracted text is
     written into the string TARGET starting at index TSTART.  The
     operation is not defined if `(eq?  TARGET S)' or these arguments
     share storage - you cannot copy a string on top of itself.


File: guile.info,  Node: SRFI-13 Miscellaneous,  Next: SRFI-13 Filtering/Deleting,  Prev: SRFI-13 Replicate/Rotate,  Up: SRFI-13

39.11.14 Miscellaneous
----------------------

`string-replace' is for replacing a portion of a string with another
string and `string-tokenize' splits a string into a list of strings,
breaking it up on characters not belonging to a specified character set.

 -- Scheme Procedure: string-replace s1 s2 [start1 end1 start2 end2]
     Return the string S1, but with the characters START1 ... END1
     replaced by the characters START2 ... END2 from S2.

 -- Scheme Procedure: string-tokenize s [token-set start end]
     Split the string S into a list of substrings, where each substring
     is a maximal non-empty contiguous sequence of characters from the
     character set TOKEN_SET, which defaults to an equivalent of
     `char-set:graphic'.  If START or END indices are provided, they
     restrict `string-tokenize' to operating on the indicated substring
     of S.


File: guile.info,  Node: SRFI-13 Filtering/Deleting,  Prev: SRFI-13 Miscellaneous,  Up: SRFI-13

39.11.15 Filtering/Deleting
---------------------------

"Filtering" means to remove all characters from a string which do not
match a given criteria, "deleting" means the opposite.

 -- Scheme Procedure: string-filter s char_pred [start end]
     Filter the string S, retaining only those characters that satisfy
     the CHAR_PRED argument.  If the argument is a procedure, it is
     applied to each character as a predicate, if it is a character, it
     is tested for equality and if it is a character set, it is tested
     for membership.

 -- Scheme Procedure: string-delete s char_pred [start end]
     Filter the string S, retaining only those characters that do not
     satisfy the CHAR_PRED argument.  If the argument is a procedure,
     it is applied to each character as a predicate, if it is a
     character, it is tested for equality and if it is a character set,
     it is tested for membership.


File: guile.info,  Node: SRFI-14,  Next: SRFI-16,  Prev: SRFI-13,  Up: SRFI Support

39.12 SRFI-14 - Character-set Library
=====================================

SRFI-14 defines the data type "character set", and also defines a lot
of procedures for handling this character type, and a few standard
character sets like whitespace, alphabetic characters and others.

   All procedures from SRFI-14 (character-set library) are implemented
in the module `(srfi srfi-14)', as well as the standard variables
`char-set:letter', `char-set:digit' etc.

* Menu:

* Loading SRFI-14::             How to make charsets available.
* SRFI-14 Character Set Data Type::  Underlying data type for charsets.
* SRFI-14 Predicates/Comparison::  Charset predicates.
* SRFI-14 Iterating Over Character Sets::  Enumerate charset elements.
* SRFI-14 Creating Character Sets::  Making new charsets.
* SRFI-14 Querying Character Sets::  Test charsets for membership etc.
* SRFI-14 Character-Set Algebra::  Calculating new charsets.
* SRFI-14 Standard Character Sets::  Variables containing predefined charsets.


File: guile.info,  Node: Loading SRFI-14,  Next: SRFI-14 Character Set Data Type,  Up: SRFI-14

39.12.1 Loading SRFI-14
-----------------------

When Guile is properly installed, SRFI-14 support can be loaded into a
running Guile by using the `(srfi srfi-14)' module.

     $ guile
     guile> (use-modules (srfi srfi-14))
     guile> (char-set-union (char-set #\f #\o #\o) (string->char-set "bar"))
     #<charset {#\a #\b #\f #\o #\r}>
     guile>


File: guile.info,  Node: SRFI-14 Character Set Data Type,  Next: SRFI-14 Predicates/Comparison,  Prev: Loading SRFI-14,  Up: SRFI-14

39.12.2 Character Set Data Type
-------------------------------

The data type "charset" implements sets of characters (*note
Characters::).  Because the internal representation of character sets
is not visible to the user, a lot of procedures for handling them are
provided.

   Character sets can be created, extended, tested for the membership
of a characters and be compared to other character sets.

   The Guile implementation of character sets deals with 8-bit
characters.  In the standard variables, only the ASCII part of the
character range is really used, so that for example "Umlaute" and other
accented characters are not considered to be letters.  In the future,
as Guile may get support for international character sets, this will
change, so don't rely on these "features".


File: guile.info,  Node: SRFI-14 Predicates/Comparison,  Next: SRFI-14 Iterating Over Character Sets,  Prev: SRFI-14 Character Set Data Type,  Up: SRFI-14

39.12.3 Predicates/Comparison
-----------------------------

Use these procedures for testing whether an object is a character set,
or whether several character sets are equal or subsets of each other.
`char-set-hash' can be used for calculating a hash value, maybe for
usage in fast lookup procedures.

 -- Scheme Procedure: char-set? obj
     Return `#t' if OBJ is a character set, `#f' otherwise.

 -- Scheme Procedure: char-set= cs1 ...
     Return `#t' if all given character sets are equal.

 -- Scheme Procedure: char-set<= cs1 ...
     Return `#t' if every character set CSi is a subset of character
     set CSi+1.

 -- Scheme Procedure: char-set-hash cs [bound]
     Compute a hash value for the character set CS.  If BOUND is given
     and not `#f', it restricts the returned value to the range 0 ...
     BOUND - 1.


File: guile.info,  Node: SRFI-14 Iterating Over Character Sets,  Next: SRFI-14 Creating Character Sets,  Prev: SRFI-14 Predicates/Comparison,  Up: SRFI-14

39.12.4 Iterating Over Character Sets
-------------------------------------

Character set cursors are a means for iterating over the members of a
character sets.  After creating a character set cursor with
`char-set-cursor', a cursor can be dereferenced with `char-set-ref',
advanced to the next member with `char-set-cursor-next'.  Whether a
cursor has passed past the last element of the set can be checked with
`end-of-char-set?'.

   Additionally, mapping and (un-)folding procedures for character sets
are provided.

 -- Scheme Procedure: char-set-cursor cs
     Return a cursor into the character set CS.

 -- Scheme Procedure: char-set-ref cs cursor
     Return the character at the current cursor position CURSOR in the
     character set CS.  It is an error to pass a cursor for which
     `end-of-char-set?' returns true.

 -- Scheme Procedure: char-set-cursor-next cs cursor
     Advance the character set cursor CURSOR to the next character in
     the character set CS.  It is an error if the cursor given
     satisfies `end-of-char-set?'.

 -- Scheme Procedure: end-of-char-set? cursor
     Return `#t' if CURSOR has reached the end of a character set, `#f'
     otherwise.

 -- Scheme Procedure: char-set-fold kons knil cs
     Fold the procedure KONS over the character set CS, initializing it
     with KNIL.

 -- Scheme Procedure: char-set-unfold p f g seed [base_cs]
 -- Scheme Procedure: char-set-unfold! p f g seed base_cs
     This is a fundamental constructor for character sets.
        * G is used to generate a series of "seed" values from the
          initial seed: SEED, (G SEED), (G^2 SEED), (G^3 SEED), ...

        * P tells us when to stop - when it returns true when applied
          to one of the seed values.

        * F maps each seed value to a character. These characters are
          added to the base character set BASE_CS to form the result;
          BASE_CS defaults to the empty set.

     `char-set-unfold!' is the side-effecting variant.

 -- Scheme Procedure: char-set-for-each proc cs
     Apply PROC to every character in the character set CS.  The return
     value is not specified.

 -- Scheme Procedure: char-set-map proc cs
     Map the procedure PROC over every character in CS.  PROC must be a
     character -> character procedure.


File: guile.info,  Node: SRFI-14 Creating Character Sets,  Next: SRFI-14 Querying Character Sets,  Prev: SRFI-14 Iterating Over Character Sets,  Up: SRFI-14

39.12.5 Creating Character Sets
-------------------------------

New character sets are produced with these procedures.

 -- Scheme Procedure: char-set-copy cs
     Return a newly allocated character set containing all characters
     in CS.

 -- Scheme Procedure: char-set char1 ...
     Return a character set containing all given characters.

 -- Scheme Procedure: list->char-set char_list [base_cs]
 -- Scheme Procedure: list->char-set! char_list base_cs
     Convert the character list LIST to a character set.  If the
     character set BASE_CS is given, the character in this set are also
     included in the result.

     `list->char-set!' is the side-effecting variant.

 -- Scheme Procedure: string->char-set s [base_cs]
 -- Scheme Procedure: string->char-set! s base_cs
     Convert the string STR to a character set.  If the character set
     BASE_CS is given, the characters in this set are also included in
     the result.

     `string->char-set!' is the side-effecting variant.

 -- Scheme Procedure: char-set-filter pred cs [base_cs]
 -- Scheme Procedure: char-set-filter! pred cs base_cs
     Return a character set containing every character from CS so that
     it satisfies PRED.  If provided, the characters from BASE_CS are
     added to the result.

     `char-set-filter!' is the side-effecting variant.

 -- Scheme Procedure: ucs-range->char-set lower upper [error? base_cs]
 -- Scheme Procedure: uce-range->char-set! lower upper error? base_cs
     Return a character set containing all characters whose character
     codes lie in the half-open range [LOWER,UPPER).

     If ERROR is a true value, an error is signalled if the specified
     range contains characters which are not contained in the
     implemented character range.  If ERROR is `#f', these characters
     are silently left out of the resulting character set.

     The characters in BASE_CS are added to the result, if given.

     `ucs-range->char-set!' is the side-effecting variant.

 -- Scheme Procedure: ->char-set x
     Coerce X into a character set.  X may be a string, a character or
     a character set.


File: guile.info,  Node: SRFI-14 Querying Character Sets,  Next: SRFI-14 Character-Set Algebra,  Prev: SRFI-14 Creating Character Sets,  Up: SRFI-14

39.12.6 Querying Character Sets
-------------------------------

Access the elements and other information of a character set with these
procedures.

 -- Scheme Procedure: char-set-size cs
     Return the number of elements in character set CS.

 -- Scheme Procedure: char-set-count pred cs
     Return the number of the elements int the character set CS which
     satisfy the predicate PRED.

 -- Scheme Procedure: char-set->list cs
     Return a list containing the elements of the character set CS.

 -- Scheme Procedure: char-set->string cs
     Return a string containing the elements of the character set CS.
     The order in which the characters are placed in the string is not
     defined.

 -- Scheme Procedure: char-set-contains? cs char
     Return `#t' iff the character CH is contained in the character set
     CS.

 -- Scheme Procedure: char-set-every pred cs
     Return a true value if every character in the character set CS
     satisfies the predicate PRED.

 -- Scheme Procedure: char-set-any pred cs
     Return a true value if any character in the character set CS
     satisfies the predicate PRED.


File: guile.info,  Node: SRFI-14 Character-Set Algebra,  Next: SRFI-14 Standard Character Sets,  Prev: SRFI-14 Querying Character Sets,  Up: SRFI-14

39.12.7 Character-Set Algebra
-----------------------------

Character sets can be manipulated with the common set algebra operation,
such as union, complement, intersection etc.  All of these procedures
provide side-effecting variants, which modify their character set
argument(s).

 -- Scheme Procedure: char-set-adjoin cs char1 ...
 -- Scheme Procedure: char-set-adjoin! cs char1 ...
     Add all character arguments to the first argument, which must be a
     character set.

 -- Scheme Procedure: char-set-delete cs char1 ...
 -- Scheme Procedure: char-set-delete! cs char1 ...
     Delete all character arguments from the first argument, which must
     be a character set.

 -- Scheme Procedure: char-set-complement cs
 -- Scheme Procedure: char-set-complement! cs
     Return the complement of the character set CS.

 -- Scheme Procedure: char-set-union cs1 ...
 -- Scheme Procedure: char-set-union! cs1 ...
     Return the union of all argument character sets.

 -- Scheme Procedure: char-set-intersection cs1 ...
 -- Scheme Procedure: char-set-intersection! cs1 ...
     Return the intersection of all argument character sets.

 -- Scheme Procedure: char-set-difference cs1 ...
 -- Scheme Procedure: char-set-difference! cs1 ...
     Return the difference of all argument character sets.

 -- Scheme Procedure: char-set-xor cs1 ...
 -- Scheme Procedure: char-set-xor! cs1 ...
     Return the exclusive-or of all argument character sets.

 -- Scheme Procedure: char-set-diff+intersection cs1 ...
 -- Scheme Procedure: char-set-diff+intersection! cs1 ...
     Return the difference and the intersection of all argument
     character sets.


File: guile.info,  Node: SRFI-14 Standard Character Sets,  Prev: SRFI-14 Character-Set Algebra,  Up: SRFI-14

39.12.8 Standard Character Sets
-------------------------------

In order to make the use of the character set data type and procedures
useful, several predefined character set variables exist.

 -- Variable: char-set:lower-case
     All lower-case characters.

 -- Variable: char-set:upper-case
     All upper-case characters.

 -- Variable: char-set:title-case
     This is empty, because ASCII has no titlecase characters.

 -- Variable: char-set:letter
     All letters, e.g. the union of `char-set:lower-case' and
     `char-set:upper-case'.

 -- Variable: char-set:digit
     All digits.

 -- Variable: char-set:letter+digit
     The union of `char-set:letter' and `char-set:digit'.

 -- Variable: char-set:graphic
     All characters which would put ink on the paper.

 -- Variable: char-set:printing
     The union of `char-set:graphic' and `char-set:whitespace'.

 -- Variable: char-set:whitespace
     All whitespace characters.

 -- Variable: char-set:blank
     All horizontal whitespace characters, that is `#\space' and
     `#\tab'.

 -- Variable: char-set:iso-control
     The ISO control characters with the codes 0-31 and 127.

 -- Variable: char-set:punctuation
     The characters `!"#%&'()*,-./:;?@[\\]_{}'

 -- Variable: char-set:symbol
     The characters `$+<=>^`|~'.

 -- Variable: char-set:hex-digit
     The hexadecimal digits `0123456789abcdefABCDEF'.

 -- Variable: char-set:ascii
     All ASCII characters.

 -- Variable: char-set:empty
     The empty character set.

 -- Variable: char-set:full
     This character set contains all possible characters.


File: guile.info,  Node: SRFI-16,  Next: SRFI-17,  Prev: SRFI-14,  Up: SRFI Support

39.13 SRFI-16 - case-lambda
===========================

The syntactic form `case-lambda' creates procedures, just like
`lambda', but has syntactic extensions for writing procedures of
varying arity easier.

   The syntax of the `case-lambda' form is defined in the following
EBNF grammar.

     <case-lambda>
        --> (case-lambda <case-lambda-clause>)
     <case-lambda-clause>
        --> (<formals> <definition-or-command>*)
     <formals>
        --> (<identifier>*)
          | (<identifier>* . <identifier>)
          | <identifier>

   The value returned by a `case-lambda' form is a procedure which
matches the number of actual arguments against the formals in the
various clauses, in order.  "Formals" means a formal argument list just
like with `lambda' (*note Lambda::). The first matching clause is
selected, the corresponding values from the actual parameter list are
bound to the variable names in the clauses and the body of the clause is
evaluated.  If no clause matches, an error is signalled.

   The following (silly) definition creates a procedure FOO which acts
differently, depending on the number of actual arguments.  If one
argument is given, the constant `#t' is returned, two arguments are
added and if more arguments are passed, their product is calculated.

     (define foo (case-lambda
                   ((x) #t)
                   ((x y) (+ x y))
                   (z
                     (apply * z))))
     (foo 'bar)
     =>
     #t
     (foo 2 4)
     =>
     6
     (foo 3 3 3)
     =>
     27
     (foo)
     =>
     1

   The last expression evaluates to 1 because the last clause is
matched, Z is bound to the empty list and the following multiplication,
applied to zero arguments, yields 1.


File: guile.info,  Node: SRFI-17,  Next: SRFI-19,  Prev: SRFI-16,  Up: SRFI Support

39.14 SRFI-17 - Generalized set!
================================

This is an implementation of SRFI-17: Generalized set!

   It exports the Guile procedure `make-procedure-with-setter' under
the SRFI name `getter-with-setter' and exports the standard procedures
`car', `cdr', ..., `cdddr', `string-ref' and `vector-ref' as procedures
with setters, as required by the SRFI.

   SRFI-17 was heavily criticized during its discussion period but it
was finalized anyway.  One issue was its concept of globally associating
setter "properties" with (procedure) values, which is non-Schemy.  For
this reason, this implementation chooses not to provide a way to set
the setter of a procedure.  In fact, `(set!  (setter PROC) SETTER)'
signals an error.  The only way to attach a setter to a procedure is to
create a new object (a "procedure with setter") via the
`getter-with-setter' procedure. This procedure is also specified in the
SRFI.  Using it avoids the described problems.


File: guile.info,  Node: SRFI-19,  Next: SRFI-31,  Prev: SRFI-17,  Up: SRFI Support

39.15 SRFI-19 - Time/Date Library
=================================

This is an implementation of SRFI-19: Time/Date Library

   It depends on SRFIs: 6 (*note SRFI-6::), 8 (*note SRFI-8::), 9
(*note SRFI-9::).

   This section documents constants and procedure signatures.

* Menu:

* SRFI-19 Constants::
* SRFI-19 Current time and clock resolution::
* SRFI-19 Time object and accessors::
* SRFI-19 Time comparison procedures::
* SRFI-19 Time arithmetic procedures::
* SRFI-19 Date object and accessors::
* SRFI-19 Time/Date/Julian Day/Modified Julian Day converters::
* SRFI-19 Date to string/string to date converters::


File: guile.info,  Node: SRFI-19 Constants,  Next: SRFI-19 Current time and clock resolution,  Up: SRFI-19

39.15.1 SRFI-19 Constants
-------------------------

All these are bound to their symbol names:

                time-duration
                time-monotonic
                time-process
                time-tai
                time-thread
                time-utc


File: guile.info,  Node: SRFI-19 Current time and clock resolution,  Next: SRFI-19 Time object and accessors,  Prev: SRFI-19 Constants,  Up: SRFI-19

39.15.2 SRFI-19 Current time and clock resolution
-------------------------------------------------

                (current-date . tz-offset)
                (current-julian-day)
                (current-modified-julian-day)
                (current-time . clock-type)
                (time-resolution . clock-type)


File: guile.info,  Node: SRFI-19 Time object and accessors,  Next: SRFI-19 Time comparison procedures,  Prev: SRFI-19 Current time and clock resolution,  Up: SRFI-19

39.15.3 SRFI-19 Time object and accessors
-----------------------------------------

                (make-time type nanosecond second)
                (time? obj)
                (time-type time)
                (time-nanosecond time)
                (time-second time)
                (set-time-type! time type)
                (set-time-nanosecond! time nsec)
                (set-time-second! time sec)
                (copy-time time)


File: guile.info,  Node: SRFI-19 Time comparison procedures,  Next: SRFI-19 Time arithmetic procedures,  Prev: SRFI-19 Time object and accessors,  Up: SRFI-19

39.15.4 SRFI-19 Time comparison procedures
------------------------------------------

Args are all `time' values.

                (time<=? t1 t2)
                (time<? t1 t2)
                (time=? t1 t2)
                (time>=? t1 t2)
                (time>? t1 t2)


File: guile.info,  Node: SRFI-19 Time arithmetic procedures,  Next: SRFI-19 Date object and accessors,  Prev: SRFI-19 Time comparison procedures,  Up: SRFI-19

39.15.5 SRFI-19 Time arithmetic procedures
------------------------------------------

The `foo!' variants modify in place.  Time difference is expressed in
`time-duration' values.

                (time-difference t1 t2)
                (time-difference! t1 t2)
                (add-duration time duration)
                (add-duration! time duration)
                (subtract-duration time duration)
                (subtract-duration! time duration)


File: guile.info,  Node: SRFI-19 Date object and accessors,  Next: SRFI-19 Time/Date/Julian Day/Modified Julian Day converters,  Prev: SRFI-19 Time arithmetic procedures,  Up: SRFI-19

39.15.6 SRFI-19 Date object and accessors
-----------------------------------------

                (make-date nsecs seconds minutes hours
                           date month year offset)
                (date? obj)
                (date-nanosecond date)
                (date-second date)
                (date-minute date)
                (date-hour date)
                (date-day date)
                (date-month date)
                (date-year date)
                (date-zone-offset date)
                (date-year-day date)
                (date-week-day date)
                (date-week-number date day-of-week-starting-week)


File: guile.info,  Node: SRFI-19 Time/Date/Julian Day/Modified Julian Day converters,  Next: SRFI-19 Date to string/string to date converters,  Prev: SRFI-19 Date object and accessors,  Up: SRFI-19

39.15.7 SRFI-19 Time/Date/Julian Day/Modified Julian Day converters
-------------------------------------------------------------------

                (date->julian-day date)
                (date->modified-julian-day date)
                (date->time-monotonic date)
                (date->time-tai date)
                (date->time-utc date)
                (julian-day->date jdn . tz-offset)
                (julian-day->time-monotonic jdn)
                (julian-day->time-tai jdn)
                (julian-day->time-utc jdn)
                (modified-julian-day->date jdn . tz-offset)
                (modified-julian-day->time-monotonic jdn)
                (modified-julian-day->time-tai jdn)
                (modified-julian-day->time-utc jdn)
                (time-monotonic->date time . tz-offset)
                (time-monotonic->time-tai time-in)
                (time-monotonic->time-tai! time-in)
                (time-monotonic->time-utc time-in)
                (time-monotonic->time-utc! time-in)
                (time-tai->date time . tz-offset)
                (time-tai->julian-day time)
                (time-tai->modified-julian-day time)
                (time-tai->time-monotonic time-in)
                (time-tai->time-monotonic! time-in)
                (time-tai->time-utc time-in)
                (time-tai->time-utc! time-in)
                (time-utc->date time . tz-offset)
                (time-utc->julian-day time)
                (time-utc->modified-julian-day time)
                (time-utc->time-monotonic time-in)
                (time-utc->time-monotonic! time-in)
                (time-utc->time-tai time-in)
                (time-utc->time-tai! time-in)


File: guile.info,  Node: SRFI-19 Date to string/string to date converters,  Prev: SRFI-19 Time/Date/Julian Day/Modified Julian Day converters,  Up: SRFI-19

39.15.8 SRFI-19 Date to string/string to date converters
--------------------------------------------------------

                (date->string date . format-string)
                (string->date input-string template-string)


File: guile.info,  Node: SRFI-31,  Prev: SRFI-19,  Up: SRFI Support

39.16 SRFI-31 - A special form `rec' for recursive evaluation
=============================================================

SRFI-31 defines a special form that can be used to create
self-referential expressions more conveniently.  The syntax is as
follows:

     <rec expression> --> (rec <variable> <expression>)
     <rec expression> --> (rec (<variable>+) <body>)

   The first syntax can be used to create self-referential expressions,
for example:

       guile> (define tmp (rec ones (cons 1 (delay ones))))

   The second syntax can be used to create anonymous recursive
functions:

       guile> (define tmp (rec (display-n item n)
                            (if (positive? n)
                                (begin (display n) (display-n (- n 1))))))
       guile> (tmp 42 3)
       424242
       guile>


File: guile.info,  Node: Readline Support,  Next: Value History,  Prev: SRFI Support,  Up: Top

40 Readline Support
*******************

Guile comes with an interface module to the readline library.  This
makes interactive use much more convenient, because of the command-line
editing features of readline.  Using `(ice-9 readline)', you can
navigate through the current input line with the cursor keys, retrieve
older command lines from the input history and even search through the
history entries.

* Menu:

* Loading Readline Support::    How to load readline support into Guile.
* Readline Options::            How to modify readline's behaviour.


File: guile.info,  Node: Loading Readline Support,  Next: Readline Options,  Up: Readline Support

40.1 Loading Readline Support
=============================

The module is not loaded by default and so has to be loaded and
activated explicitly.  This is done with two simple lines of code:

     (use-modules (ice-9 readline))
     (activate-readline)

   The first line will load the necessary code, and the second will
activate readline's features for the REPL.  If you plan to use this
module often, you should save these to lines to your `.guile' personal
startup file.

   You will notice that the REPL's behaviour changes a bit when you have
loaded the readline module.  For example, when you press Enter before
typing in the closing parentheses of a list, you will see the
"continuation" prompt, three dots: `...'  This gives you a nice visual
feedback when trying to match parentheses.  To make this even easier,
"bouncing parentheses" are implemented.  That means that when you type
in a closing parentheses, the cursor will jump to the corresponding
opening parenthesis for a short time, making it trivial to make them
match.

   Once the readline module is activated, all lines entered
interactively will be stored in a history and can be recalled later
using the cursor-up and -down keys.  Readline also understands the
Emacs keys for navigating through the command line and history.

   When you quit your Guile session by evaluating `(quit)' or pressing
Ctrl-D, the history will be saved to the file `.guile_history' and read
in when you start Guile for the next time.  Thus you can start a new
Guile session and still have the (probably long-winded) definition
expressions available.


File: guile.info,  Node: Readline Options,  Prev: Loading Readline Support,  Up: Readline Support

40.2 Readline Options
=====================

The readline interface module can be configured in several ways to
better suit the user's needs.  Configuration is done via the readline
module's options interface, in a similar way to the evaluator and
debugging options (*note User level options interfaces::.)

   Here is the list of readline options generated by typing
`(readline-options 'full)' in Guile.  You can also see the default
values.

     bounce-parens   500   Time (ms) to show matching opening parenthesis (0 = off).
     history-length  200   History length.
     history-file    yes   Use history file.

   The history length specifies how many input lines will be remembered.
If the history contains that many lines and additional lines are
entered, the oldest lines will be lost.  You can switch on/off the
usage of the history file using the following call.

     (readline-disable 'history)

   The readline options interface can only be used _after_ loading the
readline module, because it is defined in that module.


File: guile.info,  Node: Value History,  Next: Pretty Printing,  Prev: Readline Support,  Up: Top

41 Value History
****************

Another module which makes command line usage more convenient is
`(ice-9 history)'.  This module will change the REPL so that each value
which is evaluated and printed will be remembered under a name
constructed from the dollar character (`$') and the number of the
evaluated expression.

   Consider an example session.

     guile> (use-modules (ice-9 history))
     guile> 1
     $1 = 1
     guile> (+ $1 $1)
     $2 = 2
     guile> (* $2 $2)
     $3 = 4

   After loading the value history module `(ice-9 history)', one
(trivial) expression is evaluated.  The result is stored into the
variable `$1'.  This fact is indicated by the output `$1 = ', which is
also caused by `(ice-9 history)'.  In the next line, this variable is
used two times, to produce the value `$2', which in turn is used in the
calculation for `$3'.


File: guile.info,  Node: Pretty Printing,  Next: Formatted Output,  Prev: Value History,  Up: Top

42 Pretty Printing
******************

The module `(ice-9 pretty-print)' provides the procedure
`pretty-print', which provides nicely formatted output of Scheme
objects.  This is especially useful for deeply nested or complex data
structures, such as lists and vectors.

   The module is loaded by simply saying.

     (use-modules (ice-9 pretty-print))

   This makes the procedure `pretty-print' available.  As an example
how `pretty-print' will format the output, see the following:

     (pretty-print '(define (foo) (lambda (x)
     (cond ((zero? x) #t) ((negative? x) -x) (else (if (= x 1) 2 (* x x x)))))))
     -|
     (define (foo)
       (lambda (x)
         (cond ((zero? x) #t)
               ((negative? x) -x)
               (else (if (= x 1) 2 (* x x x))))))

 -- Scheme Procedure: pretty-print obj [port]
     Print the textual representation of the Scheme object OBJ to PORT.
     PORT defaults to the current output port, if not given.


File: guile.info,  Node: Formatted Output,  Next: Rx Regexps,  Prev: Pretty Printing,  Up: Top

43 Formatted Output
*******************

Outputting messages or other texts which are composed of literal
strings, variable contents, newlines and other formatting can be
cumbersome, when only the standard procedures like `display', `write'
and `newline' are available.  Additionally, one often wants to collect
the output in strings.  With the standard routines, the user is
required to set up a string port, add this port as a parameter to the
output procedure calls and then retrieve the resulting string from the
string port.

   The `format' procedure, to be found in module `(ice-9 format)', can
do all this, and even more.  If you are a C programmer, you can think
of this procedure as Guile's `fprintf'.

 -- Scheme Procedure: format destination format-string args ...
     The first parameter is the DESTINATION, it determines where the
     output of `format' will go.

    `#t'
          Send the formatted output to the current output port and
          return `#t'.

    `#f'
          Return the formatted output as a string.

    Any number value
          Send the formatted output to the current error port and return
          `#t'.

    A valid output port
          Send the formatted output to the port DESTINATION and return
          `#t'.

     The second parameter is the format string.  It has a similar
     function to the format string in calls to `printf' or `fprintf' in
     C.  It is output to the specified destination, but all escape
     sequences are replaced by the results of formatting the
     corresponding sequence.

     Note that escape sequences are marked with the character `~'
     (tilde), and not with a `%' (percent sign), as in C.

     The escape sequences in the following table are supported.  When
     there appears "corresponding ARG', that means any of the additional
     arguments, after dropping all arguments which have been used up by
     escape sequences which have been processed earlier.  Some of the
     format characters (the characters following the tilde) can be
     prefixed by `:', `@', or `:@', to modify the behaviour of the
     format character.  How the modified behaviour differs from the
     default behaviour is described for every character in the table
     where appropriate.

    `~~'
          Output a single `~' (tilde) character.

    `~%'
          Output a newline character, thus advancing to the next output
          line.

    `~&'
          Start a new line, that is, output a newline character if not
          already at the start of a line.

    `~_'
          Output a single space character.

    `~/'
          Output a single tabulator character.

    `~|'
          Output a page separator (formfeed) character.

    `~t'
          Advance to the next tabulator position.

    `~y'
          Pretty-print the corresponding ARG.

    `~a'
          Output the corresponding ARG like `display'.

    `~s'
          Output the corresponding ARG like `write'.

    `~d'
          Output the corresponding ARG as a decimal number.

    `~x'
          Output the corresponding ARG as a hexadecimal number.

    `~o'
          Output the corresponding ARG as an octal number.

    `~b'
          Output the corresponding ARG as a binary number.

    `~r'
          Output the corresponding ARG as a number word, e.g. 10 prints
          as `ten'.  If prefixed with `:', `tenth' is printed, if
          prefixed with `:@', Roman numbers are printed.

    `~f'
          Output the corresponding ARG as a fixed format floating point
          number, such as `1.34'.

    `~e'
          Output the corresponding ARG in exponential notation, such as
          `1.34E+0'.

    `~g'
          This works either like `~f' or like `~e', whichever produces
          less characters to be written.

    `~$'
          Like `~f', but only with two digits after the decimal point.

    `~i'
          Output the corresponding ARG as a complex number.

    `~c'
          Output the corresponding ARG as a character.  If prefixed with
          `@', it is printed like with `write'.  If prefixed with `:',
          control characters are treated specially, for example
          `#\newline' will be printed as `^J'.

    `~p'
          "Plural".  If the corresponding ARG is 1, nothing is printed
          (or `y' if prefixed with `@' or `:@'), otherwise `s' is
          printed (or `ies' if prefixed with `@' or `:@').

    `~?, ~k'
          Take the corresponding argument as a format string, and the
          following argument as a list of values.  Then format the
          values with respect to the format string.

    `~!'
          Flush the output to the output port.

    `~#\newline (tilde-newline)'
          Continuation lines.

    `~*'
          Argument jumping. Navigate in the argument list as specified
          by the corresponding argument.  If prefixed with `:', jump
          backwards in the argument list, if prefixed by `:@', jump to
          the parameter with the absolute index, otherwise jump forward
          in the argument list.

    `~('
          Case conversion begin.  If prefixed by `:', the following
          output string will be capitalized, if prefixed by `@', the
          first character will be capitalized, if prefixed by `:@' it
          will be upcased and otherwise it will be downcased.
          Conversion stops when the "Case conversion end" `~)'sequence
          is encountered.

    `~)'
          Case conversion end.  Stop any case conversion currently in
          effect.

    `~['
          Conditional begin.

    `~;'
          Conditional separator.

    `~]'
          Conditional end.

    `~{'
          Iteration begin.

    `~}'
          Iteration end.

    `~^'
          Up and out.

    `~''
          Character parameter.

    `~0 ... ~9, ~-, ~+'
          Numeric parameter.

    `~v'
          Variable parameter from next argument.

    `~#'
          Parameter is number of remaining args.  The number of the
          remaining arguments is prepended to the list of unprocessed
          arguments.

    `~,'
          Parameter separators.

    `~q'
          Inquiry message.  Insert a copyright message into the output.

     If any type conversions should fail (for example when using an
     escape sequence for number output, but the argument is a string),
     an error will be signalled.

   You may have noticed that Guile contains a `format' procedure even
when the module `(ice-9 format)' is not loaded.  The default `format'
procedure does not support all escape sequences documented in this
chapter, and will signal an error if you try to use one of them.  The
reason for providing two versions of `format' is that the full-featured
module is fairly large and requires some time to get loaded.  So the
Guile maintainers decided not to load the large version of `format' by
default, so that the start-up time of the interpreter is not
unnecessarily increased.


File: guile.info,  Node: Rx Regexps,  Next: Expect,  Prev: Formatted Output,  Up: Top

44 The Rx Regular Expression Library
************************************

[FIXME: this is taken from Gary and Mark's quick summaries and should be
reviewed and expanded.  Rx is pretty stable, so could already be done!]

   The `guile-lang-allover' package provides an interface to Tom Lord's
Rx library (currently only to POSIX regular expressions).  Use of the
library requires a two step process: compile a regular expression into
an efficient structure, then use the structure in any number of string
comparisons.

   For example, given the regular expression `abc.' (which matches any
string containing `abc' followed by any single character):

     guile> (define r (regcomp "abc."))
     guile> r
     #<rgx abc.>
     guile> (regexec r "abc")
     #f
     guile> (regexec r "abcd")
     #((0 . 4))
     guile>

   The definitions of `regcomp' and `regexec' are as follows:

 -- Scheme Procedure: regcomp pattern [flags]
     Compile the regular expression pattern using POSIX rules.  Flags is
     optional and should be specified using symbolic names:

      -- Variable: REG_EXTENDED
          use extended POSIX syntax

      -- Variable: REG_ICASE
          use case-insensitive matching

      -- Variable: REG_NEWLINE
          allow anchors to match after newline characters in the string
          and prevents `.' or `[^...]' from matching newlines.

     The `logior' procedure can be used to combine multiple flags.  The
     default is to use POSIX basic syntax, which makes `+' and `?'
     literals and `\+' and `\?' operators.  Backslashes in PATTERN must
     be escaped if specified in a literal string e.g., `"\\(a\\)\\?"'.

 -- Scheme Procedure: regexec regex string [match-pick] [flags]
     Match STRING against the compiled POSIX regular expression REGEX.
     MATCH-PICK and FLAGS are optional.  Possible flags (which can be
     combined using the logior procedure) are:

      -- Variable: REG_NOTBOL
          The beginning of line operator won't match the beginning of
          STRING (presumably because it's not the beginning of a line)

      -- Variable: REG_NOTEOL
          Similar to REG_NOTBOL, but prevents the end of line operator
          from matching the end of STRING.

     If no match is possible, regexec returns #f.  Otherwise MATCH-PICK
     determines the return value:

     `#t' or unspecified: a newly-allocated vector is returned,
     containing pairs with the indices of the matched part of STRING
     and any substrings.

     `""': a list is returned: the first element contains a nested list
     with the matched part of STRING surrounded by the the unmatched
     parts.  Remaining elements are matched substrings (if any).  All
     returned substrings share memory with STRING.

     `#f': regexec returns #t if a match is made, otherwise #f.

     vector: the supplied vector is returned, with the first element
     replaced by a pair containing the indices of the matched portion
     of STRING and further elements replaced by pairs containing the
     indices of matched substrings (if any).

     list: a list will be returned, with each member of the list
     specified by a code in the corresponding position of the supplied
     list:

     a number: the numbered matching substring (0 for the entire match).

     `#\<': the beginning of STRING to the beginning of the part matched
     by regex.

     `#\>': the end of the matched part of STRING to the end of STRING.

     `#\c': the "final tag", which seems to be associated with the "cut
     operator", which doesn't seem to be available through the posix
     interface.

     e.g., `(list #\< 0 1 #\>)'.  The returned substrings share memory
     with STRING.

   Here are some other procedures that might be used when using regular
expressions:

 -- Scheme Procedure: compiled-regexp? obj
     Test whether obj is a compiled regular expression.

 -- Scheme Procedure: regexp->dfa regex [flags]

 -- Scheme Procedure: dfa-fork dfa

 -- Scheme Procedure: reset-dfa! dfa

 -- Scheme Procedure: dfa-final-tag dfa

 -- Scheme Procedure: dfa-continuable? dfa

 -- Scheme Procedure: advance-dfa! dfa string


File: guile.info,  Node: Expect,  Next: The Scheme shell (scsh),  Prev: Rx Regexps,  Up: Top

45 Expect
*********

The macros in this section are made available with:

     (use-modules (ice-9 expect))

   `expect' is a macro for selecting actions based on the output from a
port.  The name comes from a tool of similar functionality by Don Libes.
Actions can be taken when a particular string is matched, when a timeout
occurs, or when end-of-file is seen on the port.  The `expect' macro is
described below; `expect-strings' is a front-end to `expect' based on
regexec (see the regular expression documentation).

 -- Macro: expect-strings clause ...
     By default, `expect-strings' will read from the current input port.
     The first term in each clause consists of an expression evaluating
     to a string pattern (regular expression).  As characters are read
     one-by-one from the port, they are accumulated in a buffer string
     which is matched against each of the patterns.  When a pattern
     matches, the remaining expression(s) in the clause are evaluated
     and the value of the last is returned.  For example:

          (with-input-from-file "/etc/passwd"
            (lambda ()
              (expect-strings
                ("^nobody" (display "Got a nobody user.\n")
                           (display "That's no problem.\n"))
                ("^daemon" (display "Got a daemon user.\n")))))

     The regular expression is compiled with the `REG_NEWLINE' flag, so
     that the ^ and $ anchors will match at any newline, not just at
     the start and end of the string.

     There are two other ways to write a clause:

     The expression(s) to evaluate can be omitted, in which case the
     result of the regular expression match (converted to strings, as
     obtained from regexec with match-pick set to "") will be returned
     if the pattern matches.

     The symbol `=>' can be used to indicate that the expression is a
     procedure which will accept the result of a successful regular
     expression match.  E.g.,

          ("^daemon" => write)
          ("^d\\(aemon\\)" => (lambda args (for-each write args)))
          ("^da\\(em\\)on" => (lambda (all sub)
                                   (write all) (newline)
                                   (write sub) (newline)))

     The order of the substrings corresponds to the order in which the
     opening brackets occur.

     A number of variables can be used to control the behaviour of
     `expect' (and `expect-strings').  Most have default top-level
     bindings to the value `#f', which produces the default behaviour.
     They can be redefined at the top level or locally bound in a form
     enclosing the expect expression.

    `expect-port'
          A port to read characters from, instead of the current input
          port.

    `expect-timeout'
          `expect' will terminate after this number of seconds,
          returning `#f' or the value returned by expect-timeout-proc.

    `expect-timeout-proc'
          A procedure called if timeout occurs.  The procedure takes a
          single argument: the accumulated string.

    `expect-eof-proc'
          A procedure called if end-of-file is detected on the input
          port.  The procedure takes a single argument: the accumulated
          string.

    `expect-char-proc'
          A procedure to be called every time a character is read from
          the port.  The procedure takes a single argument: the
          character which was read.

    `expect-strings-compile-flags'
          Flags to be used when compiling a regular expression, which
          are passed to `make-regexp' *Note Regexp Functions::.  The
          default value is `regexp/newline'.

    `expect-strings-exec-flags'
          Flags to be used when executing a regular expression, which
          are passed to regexp-exec *Note Regexp Functions::.  The
          default value is `regexp/noteol', which prevents `$' from
          matching the end of the string while it is still accumulating,
          but still allows it to match after a line break or at the end
          of file.

     Here's an example using all of the variables:

          (let ((expect-port (open-input-file "/etc/passwd"))
                (expect-timeout 1)
                (expect-timeout-proc
                  (lambda (s) (display "Times up!\n")))
                (expect-eof-proc
                  (lambda (s) (display "Reached the end of the file!\n")))
                (expect-char-proc display)
                (expect-strings-compile-flags (logior regexp/newline regexp/icase))
                (expect-strings-exec-flags 0))
             (expect-strings
               ("^nobody"  (display "Got a nobody user\n"))))

 -- Macro: expect clause ...
     `expect' is used in the same way as `expect-strings', but tests
     are specified not as patterns, but as procedures.  The procedures
     are called in turn after each character is read from the port,
     with two arguments: the value of the accumulated string and a flag
     to indicate whether end-of-file has been reached.  The flag will
     usually be `#f', but if end-of-file is reached, the procedures are
     called an additional time with the final accumulated string and
     `#t'.

     The test is successful if the procedure returns a non-false value.

     If the `=>' syntax is used, then if the test succeeds it must
     return a list containing the arguments to be provided to the
     corresponding expression.

     In the following example, a string will only be matched at the
     beginning of the file:

          (let ((expect-port (open-input-file "/etc/passwd")))
            (expect
               ((lambda (s eof?) (string=? s "fnord!"))
                  (display "Got a nobody user!\n"))))

     The control variables described for `expect-strings' also
     influence the behaviour of `expect', with the exception of
     variables whose names begin with `expect-strings-'.


File: guile.info,  Node: The Scheme shell (scsh),  Next: Concept Index,  Prev: Expect,  Up: Top

46 The Scheme shell (scsh)
**************************

An incomplete port of the Scheme shell (scsh) is available for Guile as
a separate package.  The current status of guile-scsh can be found at
`http://arglist.com/guile/'.

   For information about scsh see
`http://www-swiss.ai.mit.edu/ftpdir/scsh/'.

   The closest emulation of scsh can be obtained by running:

     (load-from-path "scsh/init")

   See the USAGE file supplied with guile-scsh for more details.


File: guile.info,  Node: Concept Index,  Next: Procedure Index,  Prev: The Scheme shell (scsh),  Up: Top

Concept Index
*************

This index contains concepts, keywords and non-Schemey names for several
features, to make it easier to locate the desired sections.

 [index ]
* Menu:

* #,():                                  SRFI-10.              (line  6)
* Alist:                                 Association Lists.    (line  6)
* arbiters:                              Arbiters.             (line  6)
* Association List:                      Association Lists.    (line  6)
* asyncs:                                Asyncs.               (line  6)
* begin:                                 begin.                (line  6)
* call-with-current-continuation:        Continuations.        (line  6)
* call/cc:                               Continuations.        (line  6)
* case:                                  if cond case.         (line  6)
* chaining environments:                 Chaining.             (line  6)
* closure:                               About Closure.        (line  6)
* command line history:                  Readline Support.     (line  6)
* cond:                                  if cond case.         (line  6)
* conditional evaluation:                if cond case.         (line  6)
* converting data:                       Converting data between C and Scheme.
                                                               (line  6)
* data conversion:                       Converting data between C and Scheme.
                                                               (line  6)
* Database:                              Association Lists.    (line  6)
* dynamic roots:                         Dynamic Roots.        (line  6)
* emacs regexp:                          Regular Expressions.  (line  6)
* encapsulation:                         Modules.              (line 14)
* environment <1>:                       Environments.         (line  6)
* environment:                           About Environments.   (line  6)
* environment, local:                    Local Variables.      (line  6)
* environment, top level:                About Environments.   (line  6)
* equality:                              Equality.             (line  6)
* error handling:                        Exceptions.           (line  6)
* error messages in libguile:            Error messages.       (line  6)
* exception handling:                    Exceptions.           (line  6)
* executable modules:                    Executable Modules.   (line  6)
* executing Scheme:                      Executing Scheme code.
                                                               (line  6)
* expression sequencing:                 begin.                (line  6)
* finite automaton:                      Rx Regexps.           (line  9)
* fluids:                                Fluids.               (line  6)
* format:                                Formatted Output.     (line  6)
* formatted output:                      Formatted Output.     (line  6)
* gh:                                    GH.                   (line  6)
* gh - headers:                          gh preliminaries.     (line  9)
* gh - linking:                          gh preliminaries.     (line 12)
* gh - reference manual:                 GH.                   (line  6)
* Green, Anthony:                        Threads.              (line 13)
* guardians, testing for GC'd objects:   GC Hooks.             (line 46)
* Guile threads:                         Threads.              (line  6)
* guile-snarf deprecated macros:         Macros guile-snarf recognizes.
                                                               (line  6)
* guile-snarf example:                   How guile-snarf works.
                                                               (line  6)
* guile-snarf invocation:                How guile-snarf works.
                                                               (line  6)
* guile-snarf recognized macros:         Macros guile-snarf recognizes.
                                                               (line  6)
* guile-tools:                           Executable Modules.   (line  6)
* GUILE_LOAD_PATH:                       Build Config.         (line 54)
* hash-comma:                            SRFI-10.              (line  6)
* if:                                    if cond case.         (line  6)
* iff:                                   Manual Conventions.   (line 12)
* information encapsulation:             Modules.              (line 14)
* iteration:                             while do.             (line  6)
* Jaffer, Aubrey:                        JACAL.                (line  6)
* libguile - converting data:            Converting data between C and Scheme.
                                                               (line  6)
* libguile - data types:                 Data types and constants defined by gh.
                                                               (line  6)
* libguile - error messages:             Error messages.       (line  6)
* libguile - executing Scheme:           Executing Scheme code.
                                                               (line  6)
* libguile - gh:                         GH.                   (line  6)
* libguile - new procedures:             Defining new Scheme procedures in C.
                                                               (line  6)
* libguile - start interpreter:          Starting and controlling the interpreter.
                                                               (line  6)
* local bindings:                        Local Bindings.       (line  6)
* local environment:                     Local Variables.      (line  6)
* local variable:                        Local Variables.      (line  6)
* local variables:                       Local Bindings.       (line  6)
* location:                              About Environments.   (line  6)
* looping:                               while do.             (line  6)
* Lord, Tom:                             Threads.              (line 13)
* macros:                                Macros.               (line  6)
* match structures:                      Match Structures.     (line  6)
* math - symbolic:                       JACAL.                (line  6)
* modules:                               Modules.              (line  6)
* modules, executable:                   Executable Modules.   (line  6)
* multiline comments:                    Block Comments.       (line  6)
* multiple values:                       Multiple Values.      (line  6)
* name space:                            Modules.              (line 14)
* name space - private:                  Modules.              (line 29)
* named let:                             while do.             (line  6)
* new primitives:                        Defining new Scheme procedures in C.
                                                               (line  6)
* new procedures:                        Defining new Scheme procedures in C.
                                                               (line  6)
* options - read:                        Reader options.       (line  6)
* overflow, stack:                       Debugger options.     (line 25)
* posix threads:                         Threads.              (line 13)
* pretty printing:                       Pretty Printing.      (line  6)
* primitive functions:                   Init Snarfing with guile-snarf.
                                                               (line  6)
* primitives, new:                       Defining new Scheme procedures in C.
                                                               (line  6)
* procedure documentation:               Procedure Properties. (line 64)
* procedure properties:                  Procedure Properties. (line 32)
* procedure with setter:                 Procedures with Setters.
                                                               (line  6)
* procedures, new:                       Defining new Scheme procedures in C.
                                                               (line  6)
* R5RS syntax-rules system:              Syntax Rules.         (line  6)
* read eval print loop - from the gh_ interface: Starting and controlling the interpreter.
                                                               (line 23)
* read options:                          Reader options.       (line  6)
* readline:                              Readline Support.     (line  6)
* readline options:                      Readline Options.     (line  6)
* receive:                               Multiple Values.      (line  6)
* regex:                                 Regular Expressions.  (line  6)
* regular expressions:                   Regular Expressions.  (line  6)
* REPL - from the gh_ interface:         Starting and controlling the interpreter.
                                                               (line 23)
* rx:                                    Rx Regexps.           (line  9)
* sameness:                              Equality.             (line  6)
* SCM data type:                         Unpacking the SCM type.
                                                               (line 24)
* scripts:                               Executable Modules.   (line  6)
* sequencing:                            begin.                (line  6)
* setter:                                Procedures with Setters.
                                                               (line  6)
* shadowing an imported variable binding: Chaining.            (line  6)
* snarfing:                              Snarfing.             (line  6)
* snarfing, init:                        Init Snarfing with guile-snarf.
                                                               (line  6)
* socket client example:                 Internet Socket Client.
                                                               (line  6)
* socket server example:                 Internet Socket Server.
                                                               (line  6)
* sorting:                               Sorting.              (line  6)
* sorting lists:                         Sorting.              (line  6)
* sorting vectors:                       Sorting.              (line  6)
* source properties <1>:                 Source Properties.    (line  6)
* source properties:                     Procedure Properties. (line 74)
* stack overflow:                        Debugger options.     (line 25)
* subrs, defining:                       Init Snarfing with guile-snarf.
                                                               (line  6)
* symbolic math:                         JACAL.                (line  6)
* system asyncs:                         Asyncs.               (line  6)
* threads:                               Threads.              (line  6)
* top level environment:                 About Environments.   (line  6)
* transformation:                        Macros.               (line  6)
* value history:                         Value History.        (line  6)
* variable definition:                   Top Level.            (line  6)
* variable, local:                       Local Variables.      (line  6)
* vcell:                                 About Environments.   (line  6)


File: guile.info,  Node: Procedure Index,  Next: Variable Index,  Prev: Concept Index,  Up: Top

Procedure Index
***************

This is an alphabetical list of all the procedures and macros in Guile.

   When looking for a particular procedure, please look under its Scheme
name as well as under its C name.  The C name can be constructed from
the Scheme names by a simple transformation described in the section
*Note Transforming Scheme name to C name::.

 [index ]
* Menu:

* $abs:                                  Primitive Numerics.  (line  12)
* $acos:                                 Primitive Numerics.  (line  35)
* $acosh:                                Primitive Numerics.  (line  67)
* $asin:                                 Primitive Numerics.  (line  32)
* $asinh:                                Primitive Numerics.  (line  64)
* $atan:                                 Primitive Numerics.  (line  38)
* $atan2:                                Primitive Numerics.  (line  41)
* $atanh:                                Primitive Numerics.  (line  70)
* $cos:                                  Primitive Numerics.  (line  26)
* $cosh:                                 Primitive Numerics.  (line  58)
* $exp:                                  Primitive Numerics.  (line  48)
* $expt:                                 Primitive Numerics.  (line  18)
* $log:                                  Primitive Numerics.  (line  52)
* $sin:                                  Primitive Numerics.  (line  23)
* $sinh:                                 Primitive Numerics.  (line  55)
* $sqrt:                                 Primitive Numerics.  (line  15)
* $tan:                                  Primitive Numerics.  (line  29)
* $tanh:                                 Primitive Numerics.  (line  61)
* %library-dir:                          Build Config.        (line  40)
* %make-void-port:                       Void Ports.          (line  10)
* %package-data-dir:                     Build Config.        (line  34)
* %read-delimited!:                      Line/Delimited.      (line  75)
* %read-line:                            Line/Delimited.      (line  92)
* %search-load-path:                     Loading.             (line  33)
* %site-dir:                             Build Config.        (line  49)
* %thread-handler:                       Higher level thread procedures.
                                                              (line  11)
* * <1>:                                 C Hooks.             (line  89)
* *:                                     Arithmetic.          (line  16)
* *gh_scm2chars:                         Scheme to C.         (line  43)
* *gh_scm2doubles:                       Scheme to C.         (line  47)
* *gh_scm2floats:                        Scheme to C.         (line  46)
* *gh_scm2longs:                         Scheme to C.         (line  45)
* *gh_scm2newstr:                        Scheme to C.         (line  14)
* *gh_scm2shorts:                        Scheme to C.         (line  44)
* *gh_symbol2newstr:                     Scheme to C.         (line  35)
* +:                                     Arithmetic.          (line   7)
* -:                                     Arithmetic.          (line  11)
* ->char-set:                            SRFI-14 Creating Character Sets.
                                                              (line  54)
* /:                                     Arithmetic.          (line  20)
* <:                                     Comparison.          (line  10)
* <=:                                    Comparison.          (line  16)
* <group>-disable:                       User level options interfaces.
                                                              (line  36)
* <group>-enable:                        User level options interfaces.
                                                              (line  27)
* <group>-options:                       User level options interfaces.
                                                              (line   7)
* <group>-set!:                          User level options interfaces.
                                                              (line  45)
* =:                                     Comparison.          (line   7)
* >:                                     Comparison.          (line  13)
* >=:                                    Comparison.          (line  20)
* abs:                                   Arithmetic.          (line  24)
* accept:                                Network Sockets and Communication.
                                                              (line 148)
* access?:                               File System.         (line  13)
* acons:                                 Adding or Setting Alist Entries.
                                                              (line  94)
* acos:                                  Scientific.          (line  28)
* acosh:                                 Scientific.          (line  56)
* add-hook!:                             Hook Reference.      (line  43)
* advance-dfa!:                          Rx Regexps.          (line 115)
* alarm:                                 Signals.             (line  77)
* alist-cons:                            SRFI-1 Association Lists.
                                                              (line  16)
* alist-copy:                            SRFI-1 Association Lists.
                                                              (line  24)
* alist-delete:                          SRFI-1 Association Lists.
                                                              (line  28)
* alist-delete!:                         SRFI-1 Association Lists.
                                                              (line  29)
* and:                                   and or.              (line  11)
* angle:                                 Complex.             (line  26)
* any:                                   SRFI-1 Searching.    (line  42)
* append:                                Append/Reverse.      (line  14)
* append!:                               Append/Reverse.      (line  28)
* append-map:                            SRFI-1 Fold and Map. (line 104)
* append-map!:                           SRFI-1 Fold and Map. (line 105)
* append-reverse:                        SRFI-1 Length Append etc.
                                                              (line  18)
* append-reverse!:                       SRFI-1 Length Append etc.
                                                              (line  19)
* apply:                                 Fly Evaluation.      (line  40)
* apply:nconc2last:                      Fly Evaluation.      (line  31)
* array->list:                           Conventional Arrays. (line 156)
* array-contents:                        Conventional Arrays. (line 180)
* array-copy!:                           Conventional Arrays. (line 160)
* array-copy-in-order!:                  Conventional Arrays. (line 161)
* array-dimensions:                      Conventional Arrays. (line 145)
* array-equal?:                          Conventional Arrays. (line 173)
* array-fill!:                           Conventional Arrays. (line 168)
* array-for-each:                        Array Mapping.       (line  17)
* array-in-bounds?:                      Conventional Arrays. (line  62)
* array-index-map!:                      Array Mapping.       (line  22)
* array-map!:                            Array Mapping.       (line   7)
* array-map-in-order!:                   Array Mapping.       (line   8)
* array-prototype:                       Uniform Arrays.      (line  59)
* array-rank:                            Conventional Arrays. (line 151)
* array-ref:                             Conventional Arrays. (line  58)
* array-set!:                            Conventional Arrays. (line  66)
* array-shape:                           Conventional Arrays. (line 141)
* array? <1>:                            Uniform Arrays.      (line  48)
* array?:                                Conventional Arrays. (line  42)
* ash:                                   Bitwise Operations.  (line  56)
* asin:                                  Scientific.          (line  25)
* asinh:                                 Scientific.          (line  53)
* assoc <1>:                             SRFI-1 Association Lists.
                                                              (line  11)
* assoc:                                 Retrieving Alist Entries.
                                                              (line  15)
* assoc-ref:                             Retrieving Alist Entries.
                                                              (line  41)
* assoc-remove!:                         Removing Alist Entries.
                                                              (line  59)
* assoc-set!:                            Adding or Setting Alist Entries.
                                                              (line 103)
* assq:                                  Retrieving Alist Entries.
                                                              (line  13)
* assq-ref:                              Retrieving Alist Entries.
                                                              (line  39)
* assq-remove!:                          Removing Alist Entries.
                                                              (line  57)
* assq-set!:                             Adding or Setting Alist Entries.
                                                              (line 101)
* assv:                                  Retrieving Alist Entries.
                                                              (line  14)
* assv-ref:                              Retrieving Alist Entries.
                                                              (line  40)
* assv-remove!:                          Removing Alist Entries.
                                                              (line  58)
* assv-set!:                             Adding or Setting Alist Entries.
                                                              (line 102)
* async:                                 Asyncs.              (line  22)
* async-mark:                            Asyncs.              (line  31)
* atan:                                  Scientific.          (line  31)
* atanh:                                 Scientific.          (line  59)
* backtrace:                             Backtrace.           (line   7)
* basename:                              File System.         (line 259)
* batch-mode?:                           Dynamic Roots.       (line  94)
* begin:                                 begin.               (line  21)
* begin-thread:                          Higher level thread procedures.
                                                              (line  29)
* bind:                                  Network Sockets and Communication.
                                                              (line 103)
* bit-count:                             Bit Vectors.         (line  19)
* bit-count*:                            Bit Vectors.         (line  44)
* bit-extract:                           Bitwise Operations.  (line 105)
* bit-invert!:                           Bit Vectors.         (line  29)
* bit-position:                          Bit Vectors.         (line  23)
* bit-set*!:                             Bit Vectors.         (line  33)
* boolean?:                              Booleans.            (line  66)
* break:                                 SRFI-1 Searching.    (line  33)
* break!:                                SRFI-1 Searching.    (line  34)
* builtin-bindings:                      Obarray Symbols.     (line  84)
* caar:                                  Pairs.               (line  67)
* cadr:                                  Pairs.               (line  68)
* call-with-current-continuation:        Continuations.       (line  25)
* call-with-dynamic-root:                Dynamic Roots.       (line  24)
* call-with-input-file:                  File Ports.          (line  60)
* call-with-input-string:                String Ports.        (line  17)
* call-with-new-thread:                  Low level thread primitives.
                                                              (line   7)
* call-with-output-file:                 File Ports.          (line  72)
* call-with-output-string:               String Ports.        (line  10)
* call-with-values:                      Multiple Values.     (line  29)
* car:                                   Pairs.               (line  63)
* car+cdr:                               SRFI-1 Selectors.    (line  19)
* case:                                  if cond case.        (line  47)
* catch:                                 Catch.               (line  45)
* cd:                                    Processes.           (line   6)
* cdddar:                                Pairs.               (line  69)
* cddddr:                                Pairs.               (line  70)
* cdr:                                   Pairs.               (line  64)
* ceiling:                               Arithmetic.          (line  47)
* char->integer:                         Characters.          (line 113)
* char-alphabetic?:                      Characters.          (line  82)
* char-ci<=?:                            Characters.          (line  70)
* char-ci<?:                             Characters.          (line  66)
* char-ci=?:                             Characters.          (line  62)
* char-ci>=?:                            Characters.          (line  78)
* char-ci>?:                             Characters.          (line  74)
* char-downcase:                         Characters.          (line 126)
* char-is-both?:                         Characters.          (line 107)
* char-lower-case?:                      Characters.          (line 102)
* char-numeric?:                         Characters.          (line  87)
* char-ready?:                           Reading.             (line  13)
* char-set:                              SRFI-14 Creating Character Sets.
                                                              (line  13)
* char-set->list:                        SRFI-14 Querying Character Sets.
                                                              (line  17)
* char-set->string:                      SRFI-14 Querying Character Sets.
                                                              (line  20)
* char-set-adjoin:                       SRFI-14 Character-Set Algebra.
                                                              (line  12)
* char-set-adjoin!:                      SRFI-14 Character-Set Algebra.
                                                              (line  13)
* char-set-any:                          SRFI-14 Querying Character Sets.
                                                              (line  33)
* char-set-complement:                   SRFI-14 Character-Set Algebra.
                                                              (line  22)
* char-set-complement!:                  SRFI-14 Character-Set Algebra.
                                                              (line  23)
* char-set-contains?:                    SRFI-14 Querying Character Sets.
                                                              (line  25)
* char-set-copy:                         SRFI-14 Creating Character Sets.
                                                              (line   9)
* char-set-count:                        SRFI-14 Querying Character Sets.
                                                              (line  13)
* char-set-cursor:                       SRFI-14 Iterating Over Character Sets.
                                                              (line  17)
* char-set-cursor-next:                  SRFI-14 Iterating Over Character Sets.
                                                              (line  25)
* char-set-delete:                       SRFI-14 Character-Set Algebra.
                                                              (line  17)
* char-set-delete!:                      SRFI-14 Character-Set Algebra.
                                                              (line  18)
* char-set-diff+intersection:            SRFI-14 Character-Set Algebra.
                                                              (line  42)
* char-set-diff+intersection!:           SRFI-14 Character-Set Algebra.
                                                              (line  43)
* char-set-difference:                   SRFI-14 Character-Set Algebra.
                                                              (line  34)
* char-set-difference!:                  SRFI-14 Character-Set Algebra.
                                                              (line  35)
* char-set-every:                        SRFI-14 Querying Character Sets.
                                                              (line  29)
* char-set-filter:                       SRFI-14 Creating Character Sets.
                                                              (line  32)
* char-set-filter!:                      SRFI-14 Creating Character Sets.
                                                              (line  33)
* char-set-fold:                         SRFI-14 Iterating Over Character Sets.
                                                              (line  34)
* char-set-for-each:                     SRFI-14 Iterating Over Character Sets.
                                                              (line  53)
* char-set-hash:                         SRFI-14 Predicates/Comparison.
                                                              (line  22)
* char-set-intersection:                 SRFI-14 Character-Set Algebra.
                                                              (line  30)
* char-set-intersection!:                SRFI-14 Character-Set Algebra.
                                                              (line  31)
* char-set-map:                          SRFI-14 Iterating Over Character Sets.
                                                              (line  57)
* char-set-ref:                          SRFI-14 Iterating Over Character Sets.
                                                              (line  20)
* char-set-size:                         SRFI-14 Querying Character Sets.
                                                              (line  10)
* char-set-unfold:                       SRFI-14 Iterating Over Character Sets.
                                                              (line  38)
* char-set-unfold!:                      SRFI-14 Iterating Over Character Sets.
                                                              (line  39)
* char-set-union:                        SRFI-14 Character-Set Algebra.
                                                              (line  26)
* char-set-union!:                       SRFI-14 Character-Set Algebra.
                                                              (line  27)
* char-set-xor:                          SRFI-14 Character-Set Algebra.
                                                              (line  38)
* char-set-xor!:                         SRFI-14 Character-Set Algebra.
                                                              (line  39)
* char-set<=:                            SRFI-14 Predicates/Comparison.
                                                              (line  18)
* char-set=:                             SRFI-14 Predicates/Comparison.
                                                              (line  15)
* char-set?:                             SRFI-14 Predicates/Comparison.
                                                              (line  12)
* char-upcase:                           Characters.          (line 122)
* char-upper-case?:                      Characters.          (line  97)
* char-whitespace?:                      Characters.          (line  92)
* char<=?:                               Characters.          (line  50)
* char<?:                                Characters.          (line  47)
* char=?:                                Characters.          (line  44)
* char>=?:                               Characters.          (line  58)
* char>?:                                Characters.          (line  54)
* char?:                                 Characters.          (line  40)
* chdir:                                 Processes.           (line   7)
* chmod:                                 File System.         (line 128)
* chown:                                 File System.         (line 115)
* chroot:                                Processes.           (line  24)
* circular-list:                         SRFI-1 Constructors. (line  19)
* circular-list?:                        SRFI-1 Predicates.   (line  13)
* close:                                 Ports and File Descriptors.
                                                              (line 157)
* close-all-ports-except:                Close All Ports.     (line   7)
* close-fdes:                            Ports and File Descriptors.
                                                              (line 165)
* close-input-port:                      Closing.             (line  15)
* close-output-port:                     Closing.             (line  24)
* close-pipe:                            Pipes.               (line  30)
* close-port:                            Closing.             (line   7)
* closedir:                              File System.         (line 204)
* closure?:                              Procedure Properties.
                                                              (line  25)
* command-line <1>:                      Runtime Environment. (line   8)
* command-line:                          The Top of a Script File.
                                                              (line  70)
* compiled-regexp?:                      Rx Regexps.          (line 102)
* complex?:                              Complex Numbers.     (line  29)
* concatenate:                           SRFI-1 Length Append etc.
                                                              (line  11)
* concatenate!:                          SRFI-1 Length Append etc.
                                                              (line  12)
* cond:                                  if cond case.        (line  23)
* connect:                               Network Sockets and Communication.
                                                              (line  83)
* cons:                                  Pairs.               (line  46)
* cons*:                                 List Constructors.   (line  16)
* cons-source:                           Internal Macros.     (line 104)
* copy-file:                             File System.         (line 151)
* copy-random-state:                     Random.              (line   7)
* copy-tree:                             Copying.             (line  13)
* cos:                                   Scientific.          (line  19)
* cosh:                                  Scientific.          (line  47)
* crypt:                                 Encryption.          (line  13)
* ctermid:                               Terminals and Ptys.  (line  17)
* current-error-port:                    Default Ports.       (line  19)
* current-input-port:                    Default Ports.       (line   7)
* current-load-port:                     Loading.             (line  55)
* current-output-port:                   Default Ports.       (line  13)
* current-time:                          Time.                (line   7)
* cuserid:                               User Information.    (line 115)
* debug-disable:                         User level options interfaces.
                                                              (line  39)
* debug-enable:                          User level options interfaces.
                                                              (line  30)
* debug-object?:                         Using Traps.         (line  11)
* debug-options:                         User level options interfaces.
                                                              (line  10)
* debug-options-interface:               Low level options interfaces.
                                                              (line  10)
* debug-set!:                            User level options interfaces.
                                                              (line  48)
* define:                                Top Level.           (line  34)
* define*:                               define* Reference.   (line  17)
* define*-public:                        define* Reference.   (line  18)
* define-macro:                          Macros.              (line  21)
* define-module:                         Creating Guile Modules.
                                                              (line  19)
* define-public:                         Creating Guile Modules.
                                                              (line  64)
* define-reader-ctor:                    SRFI-10.             (line  30)
* defined?:                              Binding Reflection.  (line  10)
* defmacro:                              Macros.              (line  21)
* defmacro*:                             define* Reference.   (line  38)
* defmacro*-public:                      define* Reference.   (line  39)
* delete <1>:                            SRFI-1 Deleting.     (line  11)
* delete:                                List Modification.   (line  30)
* delete! <1>:                           SRFI-1 Deleting.     (line  12)
* delete!:                               List Modification.   (line  38)
* delete-duplicates:                     SRFI-1 Deleting.     (line  20)
* delete-duplicates!:                    SRFI-1 Deleting.     (line  21)
* delete-file:                           File System.         (line 147)
* delete1!:                              List Modification.   (line  61)
* delq:                                  List Modification.   (line  18)
* delq!:                                 List Modification.   (line  36)
* delq1!:                                List Modification.   (line  49)
* delv:                                  List Modification.   (line  24)
* delv!:                                 List Modification.   (line  37)
* delv1!:                                List Modification.   (line  55)
* destroy-guardian!:                     Guardians.           (line  34)
* dfa-continuable?:                      Rx Regexps.          (line 113)
* dfa-final-tag:                         Rx Regexps.          (line 111)
* dfa-fork:                              Rx Regexps.          (line 107)
* dimensions->uniform-array:             Uniform Arrays.      (line  79)
* directory-stream?:                     File System.         (line 188)
* dirname:                               File System.         (line 254)
* display:                               Writing.             (line  14)
* display-application:                   Examining Stack Frames.
                                                              (line  54)
* display-backtrace:                     Examining the Stack. (line  23)
* display-error:                         Handling Errors.     (line  42)
* do:                                    while do.            (line  12)
* dotted-list?:                          SRFI-1 Predicates.   (line  16)
* doubly-weak-hash-table?:               Weak key hashes.     (line  21)
* drain-input:                           Reading.             (line  46)
* drop:                                  SRFI-1 Selectors.    (line  29)
* drop-right:                            SRFI-1 Selectors.    (line  35)
* drop-right!:                           SRFI-1 Selectors.    (line  36)
* drop-while:                            SRFI-1 Searching.    (line  27)
* dup:                                   Ports and File Descriptors.
                                                              (line 222)
* dup->fdes:                             Ports and File Descriptors.
                                                              (line 210)
* dup->inport:                           Ports and File Descriptors.
                                                              (line 216)
* dup->outport:                          Ports and File Descriptors.
                                                              (line 219)
* dup->port:                             Ports and File Descriptors.
                                                              (line 226)
* dup2:                                  Ports and File Descriptors.
                                                              (line 257)
* duplicate-port:                        Ports and File Descriptors.
                                                              (line 230)
* dynamic-args-call:                     Low level dynamic linking.
                                                              (line  57)
* dynamic-call:                          Low level dynamic linking.
                                                              (line  45)
* dynamic-func:                          Low level dynamic linking.
                                                              (line  34)
* dynamic-link:                          Low level dynamic linking.
                                                              (line  11)
* dynamic-object?:                       Low level dynamic linking.
                                                              (line  23)
* dynamic-root:                          Dynamic Roots.       (line  67)
* dynamic-unlink:                        Low level dynamic linking.
                                                              (line  27)
* dynamic-wind:                          Dynamic Wind.        (line  10)
* effective-version:                     Build Config.        (line  11)
* eighth:                                SRFI-1 Selectors.    (line  14)
* enclose-array:                         Conventional Arrays. (line 119)
* end-of-char-set?:                      SRFI-14 Iterating Over Character Sets.
                                                              (line  30)
* endgrent:                              User Information.    (line  96)
* endhostent:                            Network Databases.   (line  76)
* endnetent:                             Network Databases.   (line 130)
* endprotoent:                           Network Databases.   (line 179)
* endpwent:                              User Information.    (line  50)
* endservent:                            Network Databases.   (line 243)
* entity?:                               Objects.             (line   7)
* environ:                               Runtime Environment. (line  31)
* eof-object?:                           Reading.             (line   9)
* eq?:                                   Equality.            (line  22)
* equal?:                                Equality.            (line  34)
* eqv?:                                  Equality.            (line  27)
* error <1>:                             Handling Errors.     (line  38)
* error:                                 Error Reporting.     (line  11)
* eval:                                  Fly Evaluation.      (line   9)
* eval-disable:                          Evaluator Behaviour. (line  24)
* eval-enable:                           Evaluator Behaviour. (line  23)
* eval-options:                          Evaluator Behaviour. (line  12)
* eval-options-interface <1>:            Low level options interfaces.
                                                              (line   8)
* eval-options-interface:                Evaluator Behaviour. (line  30)
* eval-set!:                             Evaluator Behaviour. (line  25)
* eval-string:                           Fly Evaluation.      (line  24)
* eval2:                                 Strange Eval.        (line  14)
* evaluator-traps-interface <1>:         Low level options interfaces.
                                                              (line  11)
* evaluator-traps-interface:             Evaluator Behaviour. (line  54)
* even?:                                 Integer Operations.  (line  11)
* every:                                 SRFI-1 Searching.    (line  48)
* exact->inexact:                        Exactness.           (line  27)
* exact?:                                Exactness.           (line  15)
* execl:                                 Processes.           (line 189)
* execle:                                Processes.           (line 214)
* execlp:                                Processes.           (line 204)
* exp:                                   Scientific.          (line  34)
* expect:                                Expect.              (line 113)
* expect-strings:                        Expect.              (line  18)
* export:                                Creating Guile Modules.
                                                              (line  60)
* expt:                                  Scientific.          (line  13)
* false-if-exception:                    Error Reporting.     (line  34)
* fchmod:                                File System.         (line 127)
* fchown:                                File System.         (line 114)
* fcntl:                                 Ports and File Descriptors.
                                                              (line 294)
* fdes->inport:                          Ports and File Descriptors.
                                                              (line  88)
* fdes->outport:                         Ports and File Descriptors.
                                                              (line  93)
* fdes->ports:                           Ports and File Descriptors.
                                                              (line  83)
* fdopen:                                Ports and File Descriptors.
                                                              (line  76)
* feature?:                              Feature Manipulation.
                                                              (line  11)
* fflush:                                Writing.             (line  51)
* fifth:                                 SRFI-1 Selectors.    (line  11)
* file-port?:                            File Ports.          (line 138)
* fileno:                                Ports and File Descriptors.
                                                              (line  67)
* filter:                                SRFI-1 Filtering and Partitioning.
                                                              (line  12)
* filter!:                               SRFI-1 Filtering and Partitioning.
                                                              (line  13)
* filter-map:                            SRFI-1 Fold and Map. (line 136)
* find:                                  SRFI-1 Searching.    (line  11)
* find-tail:                             SRFI-1 Searching.    (line  15)
* first:                                 SRFI-1 Selectors.    (line   7)
* flock:                                 Ports and File Descriptors.
                                                              (line 328)
* floor:                                 Arithmetic.          (line  44)
* fluid-ref:                             Fluids.              (line  42)
* fluid-set!:                            Fluids.              (line  47)
* fluid?:                                Fluids.              (line  35)
* flush-all-ports:                       Writing.             (line  62)
* fn:                                    Defining new Scheme procedures in C.
                                                              (line  25)
* fold:                                  SRFI-1 Fold and Map. (line   7)
* fold-right:                            SRFI-1 Fold and Map. (line  15)
* for-each <1>:                          SRFI-1 Fold and Map. (line  95)
* for-each:                              List Mapping.        (line  25)
* force:                                 Delayed Evaluation.  (line  14)
* force-output:                          Writing.             (line  52)
* format:                                Formatted Output.    (line  20)
* fourth:                                SRFI-1 Selectors.    (line  10)
* frame-arguments:                       Examining Stack Frames.
                                                              (line  38)
* frame-evaluating-args?:                Examining Stack Frames.
                                                              (line  42)
* frame-next:                            Examining Stack Frames.
                                                              (line  20)
* frame-number:                          Examining Stack Frames.
                                                              (line  11)
* frame-overflow?:                       Examining Stack Frames.
                                                              (line  46)
* frame-previous:                        Examining Stack Frames.
                                                              (line  15)
* frame-procedure:                       Examining Stack Frames.
                                                              (line  33)
* frame-procedure?:                      Examining Stack Frames.
                                                              (line  29)
* frame-real?:                           Examining Stack Frames.
                                                              (line  50)
* frame-source:                          Examining Stack Frames.
                                                              (line  25)
* frame?:                                Examining Stack Frames.
                                                              (line   7)
* fstat:                                 File System.         (line  37)
* fsync:                                 Ports and File Descriptors.
                                                              (line 117)
* ftell:                                 Random Access.       (line  29)
* ftruncate:                             Random Access.       (line  35)
* gc:                                    Garbage Collection.  (line   7)
* gc-stats:                              Garbage Collection.  (line  13)
* gcd:                                   Integer Operations.  (line  28)
* gensym:                                Symbol Primitives.   (line  99)
* gentemp:                               Obarray Symbols.     (line  23)
* get-internal-real-time:                Time.                (line 143)
* get-internal-run-time:                 Time.                (line 147)
* get-output-string:                     String Ports.        (line  47)
* get-print-state:                       Writing.             (line   9)
* getcwd:                                Processes.           (line  12)
* getegid:                               Processes.           (line  60)
* getenv:                                Runtime Environment. (line  15)
* geteuid:                               Processes.           (line  53)
* getgid:                                Processes.           (line  49)
* getgr:                                 User Information.    (line 106)
* getgrent:                              User Information.    (line  92)
* getgrgid:                              User Information.    (line  81)
* getgrnam:                              User Information.    (line  84)
* getgroups:                             Processes.           (line  35)
* gethost:                               Network Databases.   (line  39)
* gethostbyaddr:                         Network Databases.   (line  41)
* gethostbyname:                         Network Databases.   (line  40)
* gethostent:                            Network Databases.   (line  70)
* gethostname:                           System Identification.
                                                              (line  34)
* getitimer:                             Signals.             (line 125)
* getlogin:                              User Information.    (line 121)
* getnet:                                Network Databases.   (line 106)
* getnetbyaddr:                          Network Databases.   (line 108)
* getnetbyname:                          Network Databases.   (line 107)
* getnetent:                             Network Databases.   (line 127)
* getopt-long:                           getopt-long Reference.
                                                              (line   7)
* getpass:                               Encryption.          (line  21)
* getpeername:                           Network Sockets and Communication.
                                                              (line 186)
* getpgrp:                               Processes.           (line  93)
* getpid:                                Processes.           (line  31)
* getppid:                               Processes.           (line  40)
* getpriority:                           Processes.           (line 253)
* getproto:                              Network Databases.   (line 156)
* getprotobyname:                        Network Databases.   (line 157)
* getprotobynumber:                      Network Databases.   (line 158)
* getprotoent:                           Network Databases.   (line 176)
* getpw:                                 User Information.    (line  60)
* getpwent:                              User Information.    (line  46)
* getpwnam:                              User Information.    (line  38)
* getpwuid:                              User Information.    (line  35)
* getserv:                               Network Databases.   (line 209)
* getservbyname:                         Network Databases.   (line 210)
* getservbyport:                         Network Databases.   (line 211)
* getservent:                            Network Databases.   (line 240)
* getsockname:                           Network Sockets and Communication.
                                                              (line 180)
* getsockopt:                            Network Sockets and Communication.
                                                              (line  40)
* gettimeofday:                          Time.                (line  12)
* getuid:                                Processes.           (line  45)
* GH_ALLOW_INTS:                         Defining new Scheme procedures in C.
                                                              (line  56)
* gh_append:                             Calling Scheme procedures from C.
                                                              (line  48)
* gh_append2:                            Calling Scheme procedures from C.
                                                              (line  49)
* gh_append3:                            Calling Scheme procedures from C.
                                                              (line  50)
* gh_append4:                            Calling Scheme procedures from C.
                                                              (line  51)
* gh_apply:                              Calling Scheme procedures from C.
                                                              (line 128)
* gh_assoc:                              Calling Scheme procedures from C.
                                                              (line  92)
* gh_assq:                               Calling Scheme procedures from C.
                                                              (line  90)
* gh_assv:                               Calling Scheme procedures from C.
                                                              (line  91)
* gh_bool2scm:                           C to Scheme.         (line   7)
* gh_boolean_p:                          Type predicates.     (line  15)
* gh_c:                                  Calling Scheme procedures from C.
                                                              (line  34)
* gh_call0:                              Calling Scheme procedures from C.
                                                              (line 132)
* gh_call1:                              Calling Scheme procedures from C.
                                                              (line 133)
* gh_call2:                              Calling Scheme procedures from C.
                                                              (line 134)
* gh_call3:                              Calling Scheme procedures from C.
                                                              (line 135)
* gh_car:                                Calling Scheme procedures from C.
                                                              (line  30)
* gh_catch:                              Calling Scheme procedures from C.
                                                              (line 141)
* gh_cdr:                                Calling Scheme procedures from C.
                                                              (line  31)
* gh_char2scm:                           C to Scheme.         (line  13)
* gh_char_p:                             Type predicates.     (line  21)
* gh_chars2byvect:                       C to Scheme.         (line  40)
* gh_cons:                               Calling Scheme procedures from C.
                                                              (line  24)
* GH_DEFER_INTS:                         Defining new Scheme procedures in C.
                                                              (line  55)
* gh_define:                             Calling Scheme procedures from C.
                                                              (line  17)
* gh_double2scm:                         C to Scheme.         (line  12)
* gh_doubles2dvect:                      C to Scheme.         (line  45)
* gh_doubles2scm:                        C to Scheme.         (line  36)
* gh_enter:                              Starting and controlling the interpreter.
                                                              (line  10)
* gh_eq_p:                               Equality predicates. (line  16)
* gh_equal_p:                            Equality predicates. (line  24)
* gh_eqv_p:                              Equality predicates. (line  20)
* gh_eval_file:                          Executing Scheme code.
                                                              (line  19)
* gh_eval_str:                           Executing Scheme code.
                                                              (line  10)
* gh_exact_p:                            Type predicates.     (line  39)
* gh_floats2fvect:                       C to Scheme.         (line  44)
* gh_get_substr:                         Scheme to C.         (line  28)
* gh_inexact_p:                          Type predicates.     (line  36)
* gh_ints2scm:                           C to Scheme.         (line  35)
* gh_is_eq:                              Calling Scheme procedures from C.
                                                              (line 146)
* gh_is_equal:                           Calling Scheme procedures from C.
                                                              (line 148)
* gh_is_eqv:                             Calling Scheme procedures from C.
                                                              (line 147)
* gh_length:                             Calling Scheme procedures from C.
                                                              (line  45)
* gh_list:                               Calling Scheme procedures from C.
                                                              (line  25)
* gh_list_p:                             Type predicates.     (line  33)
* gh_list_ref:                           Calling Scheme procedures from C.
                                                              (line  73)
* gh_list_tail:                          Calling Scheme procedures from C.
                                                              (line  70)
* gh_list_to_vector:                     Calling Scheme procedures from C.
                                                              (line 113)
* gh_load:                               Executing Scheme code.
                                                              (line  20)
* gh_long2scm:                           C to Scheme.         (line  11)
* gh_longs2ivect:                        C to Scheme.         (line  42)
* gh_make_vector:                        Calling Scheme procedures from C.
                                                              (line 108)
* gh_member:                             Calling Scheme procedures from C.
                                                              (line  78)
* gh_memq:                               Calling Scheme procedures from C.
                                                              (line  76)
* gh_memv:                               Calling Scheme procedures from C.
                                                              (line  77)
* gh_new_procedure:                      Defining new Scheme procedures in C.
                                                              (line  11)
* gh_null_p:                             Equality predicates. (line  31)
* gh_obj_length:                         Calling Scheme procedures from C.
                                                              (line 152)
* gh_pair_p:                             Type predicates.     (line  27)
* gh_procedure_p:                        Type predicates.     (line  30)
* gh_repl:                               Starting and controlling the interpreter.
                                                              (line  27)
* gh_reverse:                            Calling Scheme procedures from C.
                                                              (line  65)
* gh_scm2bool:                           Scheme to C.         (line   7)
* gh_scm2char:                           Scheme to C.         (line  11)
* gh_scm2double:                         Scheme to C.         (line  10)
* gh_scm2long:                           Scheme to C.         (line   9)
* gh_scm2ulong:                          Scheme to C.         (line   8)
* gh_set_car_x:                          Calling Scheme procedures from C.
                                                              (line  37)
* gh_set_cdr_x:                          Calling Scheme procedures from C.
                                                              (line  41)
* gh_set_substr:                         C to Scheme.         (line  24)
* gh_shorts2svect:                       C to Scheme.         (line  41)
* gh_str02scm:                           C to Scheme.         (line  20)
* gh_str2scm:                            C to Scheme.         (line  16)
* gh_string_equal_p:                     Equality predicates. (line  28)
* gh_symbol2scm:                         C to Scheme.         (line  31)
* gh_symbol_p:                           Type predicates.     (line  18)
* gh_throw:                              Calling Scheme procedures from C.
                                                              (line 142)
* gh_ulong2scm:                          C to Scheme.         (line  10)
* gh_ulongs2uvect:                       C to Scheme.         (line  43)
* gh_vector:                             Calling Scheme procedures from C.
                                                              (line 109)
* gh_vector_length:                      Calling Scheme procedures from C.
                                                              (line 112)
* gh_vector_p:                           Type predicates.     (line  24)
* gh_vector_ref:                         Calling Scheme procedures from C.
                                                              (line 110)
* gh_vector_set:                         Calling Scheme procedures from C.
                                                              (line 111)
* gmtime:                                Time.                (line  66)
* guardian-destroyed?:                   Guardians.           (line  44)
* guardian-greedy?:                      Guardians.           (line  40)
* GUILE_CHECK_RETVAL:                    Autoconf Macros.     (line  44)
* GUILE_FLAGS:                           Autoconf Macros.     (line  18)
* GUILE_MODULE_AVAILABLE:                Autoconf Macros.     (line  60)
* GUILE_MODULE_CHECK:                    Autoconf Macros.     (line  53)
* GUILE_MODULE_EXPORTS:                  Autoconf Macros.     (line  70)
* GUILE_MODULE_REQUIRED:                 Autoconf Macros.     (line  65)
* GUILE_MODULE_REQUIRED_EXPORT:          Autoconf Macros.     (line  76)
* GUILE_PROGS:                           Autoconf Macros.     (line   9)
* GUILE_SITE_DIR:                        Autoconf Macros.     (line  36)
* hash:                                  Hash Table Reference.
                                                              (line 113)
* hash-create-handle!:                   Hash Table Reference.
                                                              (line 180)
* hash-fold:                             Hash Table Reference.
                                                              (line 195)
* hash-get-handle:                       Hash Table Reference.
                                                              (line 154)
* hash-ref:                              Hash Table Reference.
                                                              (line  37)
* hash-remove!:                          Hash Table Reference.
                                                              (line  69)
* hash-set!:                             Hash Table Reference.
                                                              (line  54)
* hashq:                                 Hash Table Reference.
                                                              (line  89)
* hashq-create-handle!:                  Hash Table Reference.
                                                              (line 168)
* hashq-get-handle:                      Hash Table Reference.
                                                              (line 142)
* hashq-ref:                             Hash Table Reference.
                                                              (line  23)
* hashq-remove!:                         Hash Table Reference.
                                                              (line  59)
* hashq-set!:                            Hash Table Reference.
                                                              (line  44)
* hashv:                                 Hash Table Reference.
                                                              (line 101)
* hashv-create-handle!:                  Hash Table Reference.
                                                              (line 174)
* hashv-get-handle:                      Hash Table Reference.
                                                              (line 148)
* hashv-ref:                             Hash Table Reference.
                                                              (line  30)
* hashv-remove!:                         Hash Table Reference.
                                                              (line  64)
* hashv-set!:                            Hash Table Reference.
                                                              (line  49)
* hashx-create-handle!:                  Hash Table Reference.
                                                              (line 186)
* hashx-get-handle:                      Hash Table Reference.
                                                              (line 160)
* hashx-ref:                             Hash Table Reference.
                                                              (line 120)
* hashx-set!:                            Hash Table Reference.
                                                              (line 131)
* hook->list:                            Hook Reference.      (line  59)
* hook-empty?:                           Hook Reference.      (line  39)
* hook?:                                 Hook Reference.      (line  35)
* hostent:addr-list:                     Network Databases.   (line  34)
* hostent:addrtype:                      Network Databases.   (line  27)
* hostent:aliases:                       Network Databases.   (line  24)
* hostent:length:                        Network Databases.   (line  31)
* hostent:name:                          Network Databases.   (line  21)
* htonl:                                 Network Sockets and Communication.
                                                              (line 278)
* htons:                                 Network Sockets and Communication.
                                                              (line 266)
* if:                                    if cond case.        (line  12)
* imag-part:                             Complex.             (line  19)
* inet-aton:                             Network Address Conversion.
                                                              (line  13)
* inet-lnaof:                            Network Address Conversion.
                                                              (line  34)
* inet-makeaddr:                         Network Address Conversion.
                                                              (line  41)
* inet-netof:                            Network Address Conversion.
                                                              (line  27)
* inet-ntoa:                             Network Address Conversion.
                                                              (line  20)
* inet-ntop:                             Network Address Conversion.
                                                              (line  51)
* inet-pton:                             Network Address Conversion.
                                                              (line  62)
* inexact->exact:                        Exactness.           (line  23)
* inexact?:                              Exactness.           (line  19)
* input-port?:                           Ports.               (line  21)
* integer->char:                         Characters.          (line 118)
* integer-expt:                          Bitwise Operations.  (line  96)
* integer-length:                        Bitwise Operations.  (line  85)
* integer?:                              Integers.            (line  41)
* interaction-environment:               Fly Evaluation.      (line  16)
* intern-symbol:                         Obarray Symbols.     (line  32)
* iota:                                  SRFI-1 Constructors. (line  23)
* isatty?:                               Terminals and Ptys.  (line   7)
* join-thread:                           Low level thread primitives.
                                                              (line  21)
* key:                                   Evaluator trap options.
                                                              (line  19)
* keyword->symbol:                       Keyword Procedures.  (line  13)
* keyword-dash-symbol:                   Keyword Primitives.  (line  28)
* keyword?:                              Keyword Primitives.  (line  24)
* kill:                                  Signals.             (line   9)
* lambda:                                Lambda.              (line  34)
* lambda*:                               lambda* Reference.   (line  25)
* last:                                  SRFI-1 Selectors.    (line  50)
* last-pair:                             List Selection.      (line  14)
* last-stack-frame:                      Capturing the Stack or Innermost Stack Frame.
                                                              (line  43)
* lazy-catch:                            Lazy Catch.          (line  13)
* lchown:                                File System.         (line 114)
* lcm:                                   Integer Operations.  (line  32)
* length:                                List Selection.      (line  10)
* length+:                               SRFI-1 Length Append etc.
                                                              (line   7)
* let <1>:                               while do.            (line  38)
* let:                                   Local Bindings.      (line  23)
* let*:                                  Local Bindings.      (line  49)
* let-keywords:                          let-keywords Reference.
                                                              (line  16)
* let-optional:                          let-optional Reference.
                                                              (line  13)
* let-optional*:                         let-optional Reference.
                                                              (line  14)
* letrec:                                Local Bindings.      (line  64)
* link:                                  File System.         (line 161)
* list:                                  List Constructors.   (line  12)
* list->char-set:                        SRFI-14 Creating Character Sets.
                                                              (line  16)
* list->char-set!:                       SRFI-14 Creating Character Sets.
                                                              (line  17)
* list->string:                          String Constructors. (line  11)
* list->TAGvector:                       SRFI-4 - Procedures. (line  44)
* list->uniform-array:                   Uniform Arrays.      (line  64)
* list->uniform-vector:                  Uniform Arrays.      (line  65)
* list->vector:                          Vector Creation.     (line  14)
* list->weak-vector:                     Weak vectors.        (line  17)
* list-cdr-ref:                          List Selection.      (line  24)
* list-cdr-set!:                         List Modification.   (line  14)
* list-copy:                             List Constructors.   (line  24)
* list-head:                             List Selection.      (line  33)
* list-index:                            SRFI-1 Searching.    (line  54)
* list-ref:                              List Selection.      (line  19)
* list-set!:                             List Modification.   (line  10)
* list-tabulate:                         SRFI-1 Constructors. (line  13)
* list-tail:                             List Selection.      (line  23)
* list=:                                 SRFI-1 Predicates.   (line  34)
* list?:                                 List Predicates.     (line  12)
* listen:                                Network Sockets and Communication.
                                                              (line 139)
* load:                                  Loading.             (line   7)
* load-extension:                        Extensions.          (line  20)
* load-from-path:                        Loading.             (line  14)
* local-eval:                            Local Evaluation.    (line   9)
* localtime:                             Time.                (line  58)
* lock-mutex:                            Low level thread primitives.
                                                              (line  33)
* log:                                   Scientific.          (line  38)
* log10:                                 Scientific.          (line  41)
* logand:                                Bitwise Operations.  (line   7)
* logbit?:                               Bitwise Operations.  (line  46)
* logcount:                              Bitwise Operations.  (line  71)
* logior:                                Bitwise Operations.  (line  14)
* lognot:                                Bitwise Operations.  (line  29)
* logtest:                               Bitwise Operations.  (line  39)
* logxor:                                Bitwise Operations.  (line  21)
* lset-adjoin:                           SRFI-1 Set Operations.
                                                              (line  29)
* lset-adjoin!:                          SRFI-1 Set Operations.
                                                              (line  30)
* lset-diff+intersection:                SRFI-1 Set Operations.
                                                              (line  67)
* lset-diff+intersection!:               SRFI-1 Set Operations.
                                                              (line  68)
* lset-difference:                       SRFI-1 Set Operations.
                                                              (line  51)
* lset-difference!:                      SRFI-1 Set Operations.
                                                              (line  52)
* lset-intersection:                     SRFI-1 Set Operations.
                                                              (line  43)
* lset-intersection!:                    SRFI-1 Set Operations.
                                                              (line  44)
* lset-union:                            SRFI-1 Set Operations.
                                                              (line  36)
* lset-union!:                           SRFI-1 Set Operations.
                                                              (line  37)
* lset-xor:                              SRFI-1 Set Operations.
                                                              (line  59)
* lset-xor!:                             SRFI-1 Set Operations.
                                                              (line  60)
* lset<=:                                SRFI-1 Set Operations.
                                                              (line  20)
* lset=:                                 SRFI-1 Set Operations.
                                                              (line  25)
* lstat:                                 File System.         (line 104)
* macro-name:                            Internal Macros.     (line  96)
* macro-transformer:                     Internal Macros.     (line 100)
* macro-type:                            Internal Macros.     (line  89)
* macro?:                                Internal Macros.     (line  84)
* magnitude:                             Complex.             (line  22)
* main_prog:                             Starting and controlling the interpreter.
                                                              (line  16)
* major-version:                         Build Config.        (line  12)
* make-arbiter:                          Arbiters.            (line  15)
* make-array:                            Conventional Arrays. (line  48)
* make-class-object:                     Objects.             (line  20)
* make-condition-variable:               Low level thread primitives.
                                                              (line  44)
* make-doubly-weak-hash-table:           Weak key hashes.     (line   9)
* make-fluid:                            Fluids.              (line  25)
* make-guardian:                         Guardians.           (line   7)
* make-hash-table:                       Hash Table Reference.
                                                              (line  15)
* make-hook:                             Hook Reference.      (line  29)
* make-keyword-from-dash-symbol:         Keyword Primitives.  (line  20)
* make-list:                             List Constructors.   (line  28)
* make-mutex:                            Low level thread primitives.
                                                              (line  30)
* make-object-property:                  Object Properties.   (line  43)
* make-polar:                            Complex.             (line  12)
* make-procedure-with-setter:            Procedures with Setters.
                                                              (line  44)
* make-record-type:                      Records.             (line  16)
* make-rectangular:                      Complex.             (line   7)
* make-regexp:                           Regexp Functions.    (line  42)
* make-shared-array:                     Conventional Arrays. (line  72)
* make-shared-substring:                 Shared Substrings.   (line  18)
* make-soft-port:                        Soft Ports.          (line  10)
* make-stack:                            Capturing the Stack or Innermost Stack Frame.
                                                              (line  14)
* make-string:                           String Constructors. (line  15)
* make-struct:                           Structure Basics.    (line  10)
* make-struct-layout:                    Structure Layout.    (line  89)
* make-subclass-object:                  Objects.             (line  25)
* make-TAGvector:                        SRFI-4 - Procedures. (line  20)
* make-thread:                           Higher level thread procedures.
                                                              (line  24)
* make-undefined-variable:               Variables.           (line  43)
* make-uniform-array:                    Uniform Arrays.      (line  54)
* make-uniform-vector:                   Uniform Arrays.      (line  80)
* make-variable:                         Variables.           (line  47)
* make-vector:                           Vector Creation.     (line  41)
* make-vtable-vtable:                    Vtables.             (line  31)
* make-weak-key-hash-table:              Weak key hashes.     (line   7)
* make-weak-value-hash-table:            Weak key hashes.     (line   8)
* make-weak-vector:                      Weak vectors.        (line  10)
* malloc-stats:                          Garbage Collection.  (line  26)
* map <1>:                               SRFI-1 Fold and Map. (line  87)
* map:                                   List Mapping.        (line  14)
* map!:                                  SRFI-1 Fold and Map. (line 122)
* map-in-order:                          List Mapping.        (line  15)
* mask-signals:                          Asyncs.              (line  54)
* match:count:                           Match Structures.    (line  74)
* match:end:                             Match Structures.    (line  50)
* match:prefix:                          Match Structures.    (line  60)
* match:start:                           Match Structures.    (line  40)
* match:string:                          Match Structures.    (line  79)
* match:substring:                       Match Structures.    (line  25)
* match:suffix:                          Match Structures.    (line  67)
* max:                                   Arithmetic.          (line  31)
* member <1>:                            SRFI-1 Searching.    (line  57)
* member:                                List Searching.      (line  27)
* memoized-environment:                  Decoding Memoized Source Expressions.
                                                              (line  15)
* memoized?:                             Decoding Memoized Source Expressions.
                                                              (line   7)
* memq:                                  List Searching.      (line  13)
* memv:                                  List Searching.      (line  20)
* merge:                                 Sorting.             (line  16)
* merge!:                                Sorting.             (line  24)
* micro-version:                         Build Config.        (line  14)
* min:                                   Arithmetic.          (line  34)
* minor-version:                         Build Config.        (line  13)
* mkdir:                                 File System.         (line 172)
* mknod:                                 File System.         (line 223)
* mkstemp!:                              File System.         (line 246)
* mktime:                                Time.                (line  72)
* modulo:                                Integer Operations.  (line  23)
* monitor:                               Higher level thread procedures.
                                                              (line  38)
* move->fdes:                            Ports and File Descriptors.
                                                              (line 107)
* negative?:                             Comparison.          (line  30)
* netent:addrtype:                       Network Databases.   (line  97)
* netent:aliases:                        Network Databases.   (line  94)
* netent:name:                           Network Databases.   (line  91)
* netent:net:                            Network Databases.   (line 101)
* newline:                               Writing.             (line  22)
* nice:                                  Processes.           (line 233)
* nil-car:                               Emacs Lisp Support.  (line   7)
* nil-cdr:                               Emacs Lisp Support.  (line  12)
* nil-cons:                              Emacs Lisp Support.  (line  17)
* nil-eq:                                Emacs Lisp Support.  (line  22)
* ninth:                                 SRFI-1 Selectors.    (line  15)
* noop:                                  Asyncs.              (line  62)
* not:                                   Booleans.            (line  59)
* not-pair?:                             SRFI-1 Predicates.   (line  28)
* ntohl:                                 Network Sockets and Communication.
                                                              (line 284)
* ntohs:                                 Network Sockets and Communication.
                                                              (line 272)
* null:                                  Emacs Lisp Support.  (line  26)
* null-environment:                      Environments.        (line  22)
* null-list?:                            SRFI-1 Predicates.   (line  21)
* null?:                                 List Predicates.     (line  21)
* number->string:                        Conversion.          (line   7)
* number?:                               Numerical Tower.     (line  34)
* object->string:                        General Conversion.  (line  19)
* object-address:                        Garbage Collection.  (line  18)
* object-properties:                     Old-fashioned Properties.
                                                              (line  17)
* object-property:                       Old-fashioned Properties.
                                                              (line  25)
* odd?:                                  Integer Operations.  (line   7)
* open:                                  Ports and File Descriptors.
                                                              (line 124)
* open-fdes:                             Ports and File Descriptors.
                                                              (line 153)
* open-file:                             File Ports.          (line  11)
* open-input-file:                       File Ports.          (line  52)
* open-input-pipe:                       Pipes.               (line  18)
* open-input-string:                     String Ports.        (line  33)
* open-output-file:                      File Ports.          (line  56)
* open-output-pipe:                      Pipes.               (line  27)
* open-output-string:                    String Ports.        (line  40)
* open-pipe:                             Pipes.               (line  12)
* opendir:                               File System.         (line 184)
* operator?:                             Objects.             (line  11)
* option-ref:                            option-ref Reference.
                                                              (line   7)
* or:                                    and or.              (line  20)
* output-port?:                          Ports.               (line  26)
* pair-fold:                             SRFI-1 Fold and Map. (line  21)
* pair-fold-right:                       SRFI-1 Fold and Map. (line  25)
* pair-for-each:                         SRFI-1 Fold and Map. (line 131)
* pair?:                                 Pairs.               (line  52)
* parse-path:                            Build Config.        (line  62)
* partition:                             SRFI-1 Filtering and Partitioning.
                                                              (line  21)
* partition!:                            SRFI-1 Filtering and Partitioning.
                                                              (line  22)
* pause:                                 Signals.             (line  88)
* pclose:                                Pipes.               (line  29)
* peek-char:                             Reading.             (line  26)
* pipe:                                  Ports and File Descriptors.
                                                              (line 186)
* popen:                                 Pipes.               (line  11)
* port->fdes:                            Ports and File Descriptors.
                                                              (line  72)
* port-closed?:                          Closing.             (line  33)
* port-column:                           Reading.             (line  61)
* port-filename:                         File Ports.          (line 124)
* port-for-each:                         Ports and File Descriptors.
                                                              (line 272)
* port-line:                             Reading.             (line  62)
* port-mode <1>:                         Ports and File Descriptors.
                                                              (line 266)
* port-mode:                             File Ports.          (line 117)
* port-revealed:                         Ports and File Descriptors.
                                                              (line  58)
* port-with-print-state:                 Writing.             (line  27)
* port?:                                 Ports.               (line  31)
* positive?:                             Comparison.          (line  27)
* pretty-print:                          Pretty Printing.     (line  28)
* primitive-eval:                        Fly Evaluation.      (line  45)
* primitive-exit:                        Processes.           (line 183)
* primitive-fork:                        Processes.           (line 224)
* primitive-load:                        Loading.             (line  17)
* primitive-load-path:                   Loading.             (line  27)
* primitive-make-property:               Property Primitives. (line   7)
* primitive-move->fdes:                  Ports and File Descriptors.
                                                              (line  98)
* primitive-property-del!:               Property Primitives. (line  25)
* primitive-property-ref:                Property Primitives. (line  13)
* primitive-property-set!:               Property Primitives. (line  21)
* print-disable:                         User level options interfaces.
                                                              (line  38)
* print-enable:                          User level options interfaces.
                                                              (line  29)
* print-options:                         User level options interfaces.
                                                              (line   9)
* print-options-interface <1>:           Low level options interfaces.
                                                              (line   9)
* print-options-interface:               Writing.             (line  32)
* print-set!:                            User level options interfaces.
                                                              (line  47)
* procedure:                             Procedures with Setters.
                                                              (line  54)
* procedure->macro:                      Internal Macros.     (line  57)
* procedure->memoizing-macro:            Internal Macros.     (line  72)
* procedure->syntax:                     Internal Macros.     (line  51)
* procedure-documentation:               Procedure Properties.
                                                              (line  68)
* procedure-environment:                 Procedure Properties.
                                                              (line  45)
* procedure-name:                        Procedure Properties.
                                                              (line  37)
* procedure-properties:                  Procedure Properties.
                                                              (line  49)
* procedure-property:                    Procedure Properties.
                                                              (line  53)
* procedure-source:                      Procedure Properties.
                                                              (line  41)
* procedure-with-setter?:                Procedures with Setters.
                                                              (line  49)
* procedure?:                            Procedure Properties.
                                                              (line  21)
* program-arguments <1>:                 Runtime Environment. (line   7)
* program-arguments:                     The Top of a Script File.
                                                              (line  71)
* promise?:                              Delayed Evaluation.  (line   9)
* proper-list?:                          SRFI-1 Predicates.   (line   9)
* protoent:aliases:                      Network Databases.   (line 148)
* protoent:name:                         Network Databases.   (line 145)
* protoent:proto:                        Network Databases.   (line 151)
* provide:                               Feature Manipulation.
                                                              (line  17)
* provided?:                             Feature Manipulation.
                                                              (line  10)
* PTR2SCM:                               Non-immediate objects.
                                                              (line  17)
* putenv:                                Runtime Environment. (line  41)
* pwd:                                   Processes.           (line  11)
* quit:                                  Dynamic Roots.       (line  75)
* quotient:                              Integer Operations.  (line  15)
* raise:                                 Signals.             (line  38)
* random:                                Random.              (line  11)
* random:exp:                            Random.              (line  25)
* random:hollow-sphere!:                 Random.              (line  31)
* random:normal:                         Random.              (line  38)
* random:normal-vector!:                 Random.              (line  45)
* random:solid-sphere!:                  Random.              (line  51)
* random:uniform:                        Random.              (line  59)
* rational?:                             Reals and Rationals. (line  52)
* read:                                  Scheme Read.         (line   7)
* read-and-eval!:                        Strange Eval.        (line  30)
* read-char:                             Reading.             (line  20)
* read-delimited:                        Line/Delimited.      (line  46)
* read-delimited!:                       Line/Delimited.      (line  53)
* read-disable <1>:                      User level options interfaces.
                                                              (line  37)
* read-disable:                          Scheme Read.         (line  29)
* read-enable <1>:                       User level options interfaces.
                                                              (line  28)
* read-enable:                           Scheme Read.         (line  28)
* read-hash-extend:                      Reader Extensions.   (line   7)
* read-line:                             Line/Delimited.      (line  16)
* read-line!:                            Line/Delimited.      (line  40)
* read-only-string?:                     Read Only Strings.   (line  30)
* read-options <1>:                      User level options interfaces.
                                                              (line   8)
* read-options:                          Scheme Read.         (line  18)
* read-options-interface <1>:            Low level options interfaces.
                                                              (line   7)
* read-options-interface:                Scheme Read.         (line  35)
* read-set! <1>:                         User level options interfaces.
                                                              (line  46)
* read-set!:                             Scheme Read.         (line  30)
* read-string!/partial:                  Block Reading and Writing.
                                                              (line  15)
* readdir:                               File System.         (line 193)
* readlink:                              File System.         (line 110)
* real-part:                             Complex.             (line  16)
* real?:                                 Reals and Rationals. (line  45)
* receive:                               Multiple Values.     (line  48)
* record-accessor:                       Records.             (line  45)
* record-constructor:                    Records.             (line  26)
* record-modifier:                       Records.             (line  54)
* record-predicate:                      Records.             (line  39)
* record-type-descriptor:                Records.             (line  65)
* record-type-fields:                    Records.             (line  80)
* record-type-name:                      Records.             (line  74)
* record?:                               Records.             (line  10)
* recv!:                                 Network Sockets and Communication.
                                                              (line 192)
* recvfrom!:                             Network Sockets and Communication.
                                                              (line 221)
* redirect-port:                         Ports and File Descriptors.
                                                              (line 242)
* reduce:                                SRFI-1 Fold and Map. (line  29)
* reduce-right:                          SRFI-1 Fold and Map. (line  33)
* regcomp:                               Rx Regexps.          (line  30)
* regexec:                               Rx Regexps.          (line  49)
* regexp->dfa:                           Rx Regexps.          (line 105)
* regexp-exec:                           Regexp Functions.    (line  82)
* regexp-match?:                         Match Structures.    (line  21)
* regexp-quote:                          Backslash Escapes.   (line  31)
* regexp-substitute:                     Regexp Functions.    (line 124)
* regexp-substitute/global:              Regexp Functions.    (line 156)
* regexp?:                               Regexp Functions.    (line 116)
* release-arbiter:                       Arbiters.            (line  26)
* release-port-handle:                   Ports and File Descriptors.
                                                              (line 114)
* remainder:                             Integer Operations.  (line  18)
* remove:                                SRFI-1 Filtering and Partitioning.
                                                              (line  32)
* remove!:                               SRFI-1 Filtering and Partitioning.
                                                              (line  33)
* remove-hook!:                          Hook Reference.      (line  49)
* rename:                                File System.         (line 155)
* rename-file:                           File System.         (line 156)
* reset-dfa!:                            Rx Regexps.          (line 109)
* reset-hook!:                           Hook Reference.      (line  54)
* restore-signals:                       Signals.             (line  72)
* restricted-vector-sort!:               Sorting.             (line  87)
* reverse:                               Append/Reverse.      (line  35)
* reverse!:                              Append/Reverse.      (line  40)
* reverse-list->string:                  SRFI-13 List/String Conversion.
                                                              (line  15)
* rewinddir:                             File System.         (line 199)
* rmdir:                                 File System.         (line 179)
* round:                                 Arithmetic.          (line  40)
* run-asyncs:                            Asyncs.              (line  43)
* run-hook:                              Hook Reference.      (line  63)
* scheme-report-environment:             Environments.        (line  21)
* scm-error <1>:                         Handling Errors.     (line  35)
* scm-error:                             Error Reporting.     (line  15)
* SCM2PTR:                               Non-immediate objects.
                                                              (line  13)
* scm_abs:                               Arithmetic.          (line  25)
* scm_accept:                            Network Sockets and Communication.
                                                              (line 149)
* scm_access:                            File System.         (line  14)
* scm_acons:                             Adding or Setting Alist Entries.
                                                              (line  95)
* scm_acosh:                             Primitive Numerics.  (line  78)
* scm_add_feature:                       Feature Manipulation.
                                                              (line  24)
* scm_add_hook_x:                        Hook Reference.      (line  44)
* scm_alarm:                             Signals.             (line  78)
* scm_append:                            Append/Reverse.      (line  15)
* scm_append_x:                          Append/Reverse.      (line  29)
* SCM_ARG1:                              Signalling Type Errors.
                                                              (line  18)
* SCM_ARG2:                              Signalling Type Errors.
                                                              (line  19)
* SCM_ARG3:                              Signalling Type Errors.
                                                              (line  20)
* SCM_ARG4:                              Signalling Type Errors.
                                                              (line  21)
* SCM_ARG5:                              Signalling Type Errors.
                                                              (line  22)
* SCM_ARG6:                              Signalling Type Errors.
                                                              (line  23)
* SCM_ARG7:                              Signalling Type Errors.
                                                              (line  24)
* SCM_ARGn:                              Signalling Type Errors.
                                                              (line  33)
* scm_array_contents:                    Conventional Arrays. (line 181)
* scm_array_copy_x:                      Conventional Arrays. (line 162)
* scm_array_dimensions:                  Conventional Arrays. (line 146)
* scm_array_fill_x:                      Conventional Arrays. (line 169)
* scm_array_for_each:                    Array Mapping.       (line  18)
* scm_array_in_bounds_p:                 Conventional Arrays. (line  63)
* scm_array_index_map_x:                 Array Mapping.       (line  23)
* scm_array_map_x:                       Array Mapping.       (line   9)
* scm_array_p:                           Conventional Arrays. (line  43)
* scm_array_prototype:                   Uniform Arrays.      (line  60)
* scm_array_rank:                        Conventional Arrays. (line 152)
* scm_array_set_x:                       Conventional Arrays. (line  68)
* scm_array_to_list:                     Conventional Arrays. (line 157)
* scm_ash:                               Bitwise Operations.  (line  57)
* scm_asinh:                             Primitive Numerics.  (line  77)
* SCM_ASSERT:                            Signalling Type Errors.
                                                              (line  13)
* scm_assoc:                             Retrieving Alist Entries.
                                                              (line  18)
* scm_assoc_ref:                         Retrieving Alist Entries.
                                                              (line  44)
* scm_assoc_remove_x:                    Removing Alist Entries.
                                                              (line  62)
* scm_assoc_set_x:                       Adding or Setting Alist Entries.
                                                              (line 106)
* scm_assq:                              Retrieving Alist Entries.
                                                              (line  16)
* scm_assq_ref:                          Retrieving Alist Entries.
                                                              (line  42)
* scm_assq_remove_x:                     Removing Alist Entries.
                                                              (line  60)
* scm_assq_set_x:                        Adding or Setting Alist Entries.
                                                              (line 104)
* scm_assv:                              Retrieving Alist Entries.
                                                              (line  17)
* scm_assv_ref:                          Retrieving Alist Entries.
                                                              (line  43)
* scm_assv_remove_x:                     Removing Alist Entries.
                                                              (line  61)
* scm_assv_set_x:                        Adding or Setting Alist Entries.
                                                              (line 105)
* scm_async:                             Asyncs.              (line  23)
* scm_async_mark:                        Asyncs.              (line  32)
* scm_atanh:                             Primitive Numerics.  (line  79)
* scm_backtrace:                         Backtrace.           (line   8)
* scm_basename:                          File System.         (line 260)
* scm_bind:                              Network Sockets and Communication.
                                                              (line 104)
* scm_bit_count:                         Bit Vectors.         (line  20)
* scm_bit_count_star:                    Bit Vectors.         (line  45)
* scm_bit_extract:                       Bitwise Operations.  (line 106)
* scm_bit_invert_x:                      Bit Vectors.         (line  30)
* scm_bit_position:                      Bit Vectors.         (line  24)
* scm_bit_set_star_x:                    Bit Vectors.         (line  34)
* SCM_BOOL_F:                            Boolean Data.        (line  10)
* SCM_BOOL_NOT:                          Boolean Data.        (line  18)
* SCM_BOOL_T:                            Boolean Data.        (line   9)
* scm_boolean_p:                         Booleans.            (line  67)
* scm_boot_guile:                        Guile Initialization Functions.
                                                              (line  22)
* scm_builtin_bindings:                  Obarray Symbols.     (line  85)
* scm_c_call_with_current_module:        Accessing Modules from C.
                                                              (line  21)
* scm_c_define <1>:                      Accessing Modules from C.
                                                              (line  39)
* scm_c_define:                          Top Level.           (line  44)
* scm_c_define_gsubr:                    Subrs.               (line  24)
* scm_c_define_module:                   Accessing Modules from C.
                                                              (line  59)
* scm_c_export:                          Accessing Modules from C.
                                                              (line  85)
* scm_c_hook_add:                        C Hooks.             (line  74)
* scm_c_hook_init:                       C Hooks.             (line  46)
* scm_c_hook_remove:                     C Hooks.             (line  80)
* scm_c_load_extension:                  Extensions.          (line  22)
* scm_c_lookup:                          Accessing Modules from C.
                                                              (line  26)
* scm_c_module_define:                   Accessing Modules from C.
                                                              (line  48)
* scm_c_module_lookup:                   Accessing Modules from C.
                                                              (line  34)
* scm_c_register_extension:              Extensions.          (line  41)
* scm_c_resolve_module:                  Accessing Modules from C.
                                                              (line  70)
* scm_c_run_hook:                        Hook Reference.      (line  73)
* scm_c_use_module:                      Accessing Modules from C.
                                                              (line  80)
* SCM_CAAR:                              Pair Data.           (line  70)
* SCM_CADR:                              Pair Data.           (line  71)
* scm_call_with_dynamic_root:            Dynamic Roots.       (line  25)
* scm_call_with_input_string:            String Ports.        (line  18)
* scm_call_with_output_string:           String Ports.        (line  11)
* SCM_CAR:                               Pair Data.           (line  58)
* scm_catch:                             Catch.               (line  46)
* SCM_CDAR:                              Pair Data.           (line  72)
* SCM_CDDDDR:                            Pair Data.           (line  73)
* SCM_CDR:                               Pair Data.           (line  61)
* SCM_CELL_OBJECT:                       Accessing Cell Entries.
                                                              (line  26)
* SCM_CELL_TYPE:                         Heap Cell Type Information.
                                                              (line  13)
* SCM_CELL_WORD:                         Accessing Cell Entries.
                                                              (line  13)
* SCM_CHAR:                              Character Data.      (line  12)
* scm_char_alphabetic_p:                 Characters.          (line  83)
* scm_char_downcase:                     Characters.          (line 127)
* scm_char_is_both_p:                    Characters.          (line 108)
* scm_char_lower_case_p:                 Characters.          (line 103)
* scm_char_numeric_p:                    Characters.          (line  88)
* scm_char_p:                            Characters.          (line  41)
* scm_char_ready_p:                      Reading.             (line  14)
* scm_char_to_integer:                   Characters.          (line 114)
* scm_char_upcase:                       Characters.          (line 123)
* scm_char_upper_case_p:                 Characters.          (line  98)
* scm_char_whitespace_p:                 Characters.          (line  93)
* SCM_CHARP:                             Character Data.      (line   9)
* scm_chdir:                             Processes.           (line   8)
* scm_chmod:                             File System.         (line 129)
* scm_chown:                             File System.         (line 116)
* scm_chroot:                            Processes.           (line  25)
* scm_close:                             Ports and File Descriptors.
                                                              (line 158)
* scm_close_all_ports_except:            Close All Ports.     (line   8)
* scm_close_fdes:                        Ports and File Descriptors.
                                                              (line 166)
* scm_close_input_port:                  Closing.             (line  16)
* scm_close_output_port:                 Closing.             (line  25)
* scm_close_port:                        Closing.             (line   8)
* scm_closedir:                          File System.         (line 205)
* scm_closure_p:                         Procedure Properties.
                                                              (line  26)
* SCM_CLOSUREP:                          Closures.            (line  19)
* SCM_CODE:                              Closures.            (line  30)
* scm_connect:                           Network Sockets and Communication.
                                                              (line  84)
* scm_cons <1>:                          Pairs.               (line  47)
* scm_cons:                              Pair Data.           (line  47)
* scm_cons_source:                       Internal Macros.     (line 105)
* scm_cons_star:                         List Constructors.   (line  17)
* SCM_CONSP <1>:                         Basic Rules for Accessing Cell Entries.
                                                              (line  16)
* SCM_CONSP:                             Pair Data.           (line  22)
* scm_copy_file:                         File System.         (line 152)
* scm_copy_random_state:                 Random.              (line   8)
* scm_copy_tree:                         Copying.             (line  14)
* scm_crypt:                             Encryption.          (line  14)
* scm_ctermid:                           Terminals and Ptys.  (line  18)
* scm_current_error_port:                Default Ports.       (line  20)
* scm_current_input_port:                Default Ports.       (line   8)
* scm_current_load_port:                 Loading.             (line  56)
* scm_current_module:                    Accessing Modules from C.
                                                              (line  13)
* scm_current_output_port:               Default Ports.       (line  14)
* scm_current_time:                      Time.                (line   8)
* scm_cuserid:                           User Information.    (line 116)
* scm_debug_object_p:                    Using Traps.         (line  12)
* scm_debug_options:                     Low level options interfaces.
                                                              (line  15)
* scm_define <1>:                        Accessing Modules from C.
                                                              (line  44)
* scm_define:                            Top Level.           (line  43)
* scm_definedp:                          Binding Reflection.  (line  11)
* scm_delete:                            List Modification.   (line  31)
* scm_delete1_x:                         List Modification.   (line  62)
* scm_delete_file:                       File System.         (line 148)
* scm_delete_x:                          List Modification.   (line  41)
* scm_delq:                              List Modification.   (line  19)
* scm_delq1_x:                           List Modification.   (line  50)
* scm_delq_x:                            List Modification.   (line  39)
* scm_delv:                              List Modification.   (line  25)
* scm_delv1_x:                           List Modification.   (line  56)
* scm_delv_x:                            List Modification.   (line  40)
* scm_destroy_guardian_x:                Guardians.           (line  35)
* scm_dimensions_to_uniform_array:       Uniform Arrays.      (line  81)
* scm_directory_stream_p:                File System.         (line 189)
* scm_dirname:                           File System.         (line 255)
* scm_display_application:               Examining Stack Frames.
                                                              (line  55)
* scm_display_backtrace:                 Examining the Stack. (line  24)
* scm_display_error:                     Handling Errors.     (line  44)
* scm_doubly_weak_hash_table_p:          Weak key hashes.     (line  24)
* scm_drain_input:                       Reading.             (line  47)
* scm_dup2:                              Ports and File Descriptors.
                                                              (line 258)
* scm_dup_to_fdes:                       Ports and File Descriptors.
                                                              (line 211)
* scm_dynamic_args_call:                 Low level dynamic linking.
                                                              (line  58)
* scm_dynamic_call:                      Low level dynamic linking.
                                                              (line  46)
* scm_dynamic_func:                      Low level dynamic linking.
                                                              (line  35)
* scm_dynamic_link:                      Low level dynamic linking.
                                                              (line  12)
* scm_dynamic_object_p:                  Low level dynamic linking.
                                                              (line  24)
* scm_dynamic_root:                      Dynamic Roots.       (line  68)
* scm_dynamic_unlink:                    Low level dynamic linking.
                                                              (line  28)
* scm_dynamic_wind:                      Dynamic Wind.        (line  11)
* scm_effective_version:                 Build Config.        (line  16)
* scm_enclose_array:                     Conventional Arrays. (line 120)
* scm_entity_p:                          Objects.             (line   8)
* SCM_ENV:                               Closures.            (line  38)
* scm_environ:                           Runtime Environment. (line  32)
* scm_eof_object_p:                      Reading.             (line  10)
* SCM_EOF_VAL:                           Unique Values.       (line  15)
* SCM_EOL:                               Unique Values.       (line  11)
* scm_error_scm:                         Error Reporting.     (line  16)
* scm_eval:                              Fly Evaluation.      (line  10)
* scm_eval2:                             Strange Eval.        (line  15)
* scm_eval_options_interface <1>:        Low level options interfaces.
                                                              (line  13)
* scm_eval_options_interface:            Evaluator Behaviour. (line  31)
* scm_eval_string:                       Fly Evaluation.      (line  25)
* scm_evaluator_traps <1>:               Low level options interfaces.
                                                              (line  16)
* scm_evaluator_traps:                   Evaluator Behaviour. (line  55)
* scm_even_p:                            Integer Operations.  (line  12)
* scm_exact_p:                           Exactness.           (line  16)
* scm_execl:                             Processes.           (line 190)
* scm_execle:                            Processes.           (line 215)
* scm_execlp:                            Processes.           (line 205)
* scm_fcntl:                             Ports and File Descriptors.
                                                              (line 295)
* scm_fdes_to_ports:                     Ports and File Descriptors.
                                                              (line  84)
* scm_fdopen:                            Ports and File Descriptors.
                                                              (line  77)
* scm_file_port_p:                       File Ports.          (line 139)
* scm_fileno:                            Ports and File Descriptors.
                                                              (line  68)
* scm_flock:                             Ports and File Descriptors.
                                                              (line 329)
* scm_fluid_p:                           Fluids.              (line  36)
* scm_fluid_ref:                         Fluids.              (line  43)
* scm_fluid_set_x:                       Fluids.              (line  48)
* scm_flush_all_ports:                   Writing.             (line  63)
* scm_force:                             Delayed Evaluation.  (line  15)
* scm_force_output:                      Writing.             (line  53)
* scm_fork:                              Processes.           (line 225)
* scm_frame_arguments:                   Examining Stack Frames.
                                                              (line  39)
* scm_frame_evaluating_args_p:           Examining Stack Frames.
                                                              (line  43)
* scm_frame_next:                        Examining Stack Frames.
                                                              (line  21)
* scm_frame_number:                      Examining Stack Frames.
                                                              (line  12)
* scm_frame_overflow_p:                  Examining Stack Frames.
                                                              (line  47)
* scm_frame_p:                           Examining Stack Frames.
                                                              (line   8)
* scm_frame_previous:                    Examining Stack Frames.
                                                              (line  16)
* scm_frame_procedure:                   Examining Stack Frames.
                                                              (line  34)
* scm_frame_procedure_p:                 Examining Stack Frames.
                                                              (line  30)
* scm_frame_real_p:                      Examining Stack Frames.
                                                              (line  51)
* scm_frame_source:                      Examining Stack Frames.
                                                              (line  26)
* scm_free0:                             Garbage Collecting Simple Smobs.
                                                              (line  26)
* scm_fsync:                             Ports and File Descriptors.
                                                              (line 118)
* scm_ftell:                             Random Access.       (line  30)
* scm_gc:                                Garbage Collection.  (line   8)
* scm_gc_mark:                           Garbage Collecting Smobs.
                                                              (line  41)
* scm_gc_stats:                          Garbage Collection.  (line  14)
* scm_gensym:                            Symbol Primitives.   (line 100)
* scm_gentemp:                           Obarray Symbols.     (line  24)
* scm_get_internal_real_time:            Time.                (line 144)
* scm_get_internal_run_time:             Time.                (line 148)
* scm_get_output_string:                 String Ports.        (line  48)
* scm_get_print_state:                   Writing.             (line  10)
* scm_getcwd:                            Processes.           (line  13)
* scm_getegid:                           Processes.           (line  61)
* scm_getenv:                            Runtime Environment. (line  16)
* scm_geteuid:                           Processes.           (line  54)
* scm_getgid:                            Processes.           (line  50)
* scm_getgrgid:                          User Information.    (line 107)
* scm_getgroups:                         Processes.           (line  36)
* scm_gethost:                           Network Databases.   (line  42)
* scm_gethostname:                       System Identification.
                                                              (line  35)
* scm_getitimer:                         Signals.             (line 126)
* scm_getlogin:                          User Information.    (line 122)
* scm_getnet:                            Network Databases.   (line 109)
* scm_getpass:                           Encryption.          (line  22)
* scm_getpeername:                       Network Sockets and Communication.
                                                              (line 187)
* scm_getpgrp:                           Processes.           (line  94)
* scm_getpid:                            Processes.           (line  32)
* scm_getppid:                           Processes.           (line  41)
* scm_getpriority:                       Processes.           (line 254)
* scm_getproto:                          Network Databases.   (line 159)
* scm_getpwuid:                          User Information.    (line  61)
* scm_getserv:                           Network Databases.   (line 212)
* scm_getsockname:                       Network Sockets and Communication.
                                                              (line 181)
* scm_getsockopt:                        Network Sockets and Communication.
                                                              (line  41)
* scm_gettimeofday:                      Time.                (line  13)
* scm_getuid:                            Processes.           (line  46)
* scm_gmtime:                            Time.                (line  67)
* scm_guardian_destroyed_p:              Guardians.           (line  45)
* scm_guardian_greedy_p:                 Guardians.           (line  41)
* scm_hash:                              Hash Table Reference.
                                                              (line 114)
* scm_hash_create_handle_x:              Hash Table Reference.
                                                              (line 181)
* scm_hash_fold:                         Hash Table Reference.
                                                              (line 196)
* scm_hash_get_handle:                   Hash Table Reference.
                                                              (line 155)
* scm_hash_ref:                          Hash Table Reference.
                                                              (line  38)
* scm_hash_remove_x:                     Hash Table Reference.
                                                              (line  70)
* scm_hash_set_x:                        Hash Table Reference.
                                                              (line  55)
* scm_hashq:                             Hash Table Reference.
                                                              (line  90)
* scm_hashq_create_handle_x:             Hash Table Reference.
                                                              (line 169)
* scm_hashq_get_handle:                  Hash Table Reference.
                                                              (line 143)
* scm_hashq_ref:                         Hash Table Reference.
                                                              (line  24)
* scm_hashq_remove_x:                    Hash Table Reference.
                                                              (line  60)
* scm_hashq_set_x:                       Hash Table Reference.
                                                              (line  45)
* scm_hashv:                             Hash Table Reference.
                                                              (line 102)
* scm_hashv_create_handle_x:             Hash Table Reference.
                                                              (line 175)
* scm_hashv_get_handle:                  Hash Table Reference.
                                                              (line 149)
* scm_hashv_ref:                         Hash Table Reference.
                                                              (line  31)
* scm_hashv_remove_x:                    Hash Table Reference.
                                                              (line  65)
* scm_hashv_set_x:                       Hash Table Reference.
                                                              (line  50)
* scm_hashx_create_handle_x:             Hash Table Reference.
                                                              (line 188)
* scm_hashx_get_handle:                  Hash Table Reference.
                                                              (line 161)
* scm_hashx_ref:                         Hash Table Reference.
                                                              (line 121)
* scm_hashx_set_x:                       Hash Table Reference.
                                                              (line 132)
* scm_hook_empty_p:                      Hook Reference.      (line  40)
* scm_hook_p:                            Hook Reference.      (line  36)
* scm_hook_to_list:                      Hook Reference.      (line  60)
* SCM_HOOKP:                             Hook Reference.      (line  80)
* scm_htonl:                             Network Sockets and Communication.
                                                              (line 279)
* scm_htons:                             Network Sockets and Communication.
                                                              (line 267)
* SCM_IMP <1>:                           Immediate objects.   (line  14)
* SCM_IMP:                               Immediates vs Non-immediates.
                                                              (line  18)
* scm_inet_aton:                         Network Address Conversion.
                                                              (line  14)
* scm_inet_makeaddr:                     Network Address Conversion.
                                                              (line  42)
* scm_inet_netof:                        Network Address Conversion.
                                                              (line  28)
* scm_inet_ntoa:                         Network Address Conversion.
                                                              (line  21)
* scm_inet_ntop:                         Network Address Conversion.
                                                              (line  52)
* scm_inet_pton:                         Network Address Conversion.
                                                              (line  63)
* scm_inexact_p:                         Exactness.           (line  20)
* scm_inexact_to_exact:                  Exactness.           (line  24)
* scm_init_guile:                        Guile Initialization Functions.
                                                              (line  52)
* scm_input_port_p:                      Ports.               (line  22)
* scm_integer_expt:                      Bitwise Operations.  (line  97)
* scm_integer_length:                    Bitwise Operations.  (line  86)
* scm_integer_p:                         Integers.            (line  42)
* scm_integer_to_char:                   Characters.          (line 119)
* scm_interaction_environment:           Fly Evaluation.      (line  17)
* scm_intern_symbol:                     Obarray Symbols.     (line  33)
* SCM_INUM:                              Integer Data.        (line  23)
* SCM_INUMP:                             Integer Data.        (line  17)
* scm_isatty_p:                          Terminals and Ptys.  (line   8)
* scm_keyword_dash_symbol:               Keyword Primitives.  (line  29)
* scm_keyword_p:                         Keyword Primitives.  (line  25)
* scm_kill:                              Signals.             (line  10)
* scm_last_pair:                         List Selection.      (line  15)
* scm_last_stack_frame:                  Capturing the Stack or Innermost Stack Frame.
                                                              (line  44)
* scm_lazy_catch:                        Lazy Catch.          (line  14)
* scm_length:                            List Selection.      (line  11)
* scm_link:                              File System.         (line 162)
* scm_list:                              List Constructors.   (line  13)
* scm_list_cdr_set_x:                    List Modification.   (line  15)
* scm_list_copy:                         List Constructors.   (line  25)
* scm_list_head:                         List Selection.      (line  34)
* scm_list_p:                            List Predicates.     (line  13)
* scm_list_ref:                          List Selection.      (line  20)
* scm_list_set_x:                        List Modification.   (line  11)
* scm_list_tail:                         List Selection.      (line  25)
* scm_list_to_uniform_array:             Uniform Arrays.      (line  66)
* scm_listen:                            Network Sockets and Communication.
                                                              (line 140)
* scm_lnaof:                             Network Address Conversion.
                                                              (line  35)
* scm_load_extension:                    Extensions.          (line  21)
* scm_local_eval:                        Local Evaluation.    (line  10)
* scm_localtime:                         Time.                (line  59)
* scm_logbit_p:                          Bitwise Operations.  (line  47)
* scm_logcount:                          Bitwise Operations.  (line  72)
* scm_lognot:                            Bitwise Operations.  (line  30)
* scm_logtest:                           Bitwise Operations.  (line  40)
* scm_lookup:                            Accessing Modules from C.
                                                              (line  31)
* scm_lstat:                             File System.         (line 105)
* scm_macro_name:                        Internal Macros.     (line  97)
* scm_macro_p:                           Internal Macros.     (line  85)
* scm_macro_transformer:                 Internal Macros.     (line 101)
* scm_macro_type:                        Internal Macros.     (line  90)
* scm_major_version:                     Build Config.        (line  17)
* scm_makacro:                           Internal Macros.     (line  52)
* scm_make_arbiter:                      Arbiters.            (line  16)
* SCM_MAKE_CHAR:                         Character Data.      (line  16)
* scm_make_class_object:                 Objects.             (line  21)
* scm_make_doubly_weak_hash_table:       Weak key hashes.     (line  12)
* scm_make_fluid:                        Fluids.              (line  26)
* scm_make_guardian:                     Guardians.           (line   8)
* scm_make_hook:                         Hook Reference.      (line  30)
* scm_make_keyword_from_dash_symbol:     Keyword Primitives.  (line  21)
* scm_make_polar:                        Complex.             (line  13)
* scm_make_procedure_with_setter:        Procedures with Setters.
                                                              (line  45)
* scm_make_rectangular:                  Complex.             (line   8)
* scm_make_regexp:                       Regexp Functions.    (line  43)
* scm_make_shared_array:                 Conventional Arrays. (line  73)
* scm_make_shared_substring:             Shared Substrings.   (line  19)
* scm_make_smob_type:                    Describing a New Type.
                                                              (line  51)
* scm_make_smob_type_mfpe:               Describing a New Type.
                                                              (line 106)
* scm_make_soft_port:                    Soft Ports.          (line  11)
* scm_make_stack:                        Capturing the Stack or Innermost Stack Frame.
                                                              (line  15)
* scm_make_string:                       String Constructors. (line  16)
* scm_make_struct:                       Structure Basics.    (line  11)
* scm_make_struct_layout:                Structure Layout.    (line  90)
* scm_make_subclass_object:              Objects.             (line  26)
* scm_make_undefined_variable:           Variables.           (line  44)
* scm_make_variable:                     Variables.           (line  48)
* scm_make_vector:                       Vector Creation.     (line  42)
* scm_make_vtable_vtable:                Vtables.             (line  33)
* scm_make_weak_key_hash_table:          Weak key hashes.     (line  10)
* scm_make_weak_value_hash_table:        Weak key hashes.     (line  11)
* scm_make_weak_vector:                  Weak vectors.        (line  11)
* SCM_MAKINUM:                           Integer Data.        (line  27)
* scm_makmacro:                          Internal Macros.     (line  58)
* scm_makmmacro:                         Internal Macros.     (line  73)
* scm_map:                               List Mapping.        (line  16)
* scm_markcdr:                           Garbage Collecting Simple Smobs.
                                                              (line  18)
* scm_mask_signals:                      Asyncs.              (line  55)
* scm_member:                            List Searching.      (line  28)
* scm_memoized_environment:              Decoding Memoized Source Expressions.
                                                              (line  16)
* scm_memoized_p:                        Decoding Memoized Source Expressions.
                                                              (line   8)
* scm_memq:                              List Searching.      (line  14)
* scm_memv:                              List Searching.      (line  21)
* scm_merge:                             Sorting.             (line  17)
* scm_merge_x:                           Sorting.             (line  25)
* scm_micro_version:                     Build Config.        (line  19)
* scm_minor_version:                     Build Config.        (line  18)
* scm_mkdir:                             File System.         (line 173)
* scm_mknod:                             File System.         (line 224)
* scm_mkstemp:                           File System.         (line 247)
* scm_mktime:                            Time.                (line  73)
* scm_module_define:                     Accessing Modules from C.
                                                              (line  49)
* scm_module_lookup:                     Accessing Modules from C.
                                                              (line  35)
* scm_module_reverse_lookup:             Accessing Modules from C.
                                                              (line  54)
* scm_must_free:                         Creating Instances.  (line  69)
* scm_must_malloc:                       Creating Instances.  (line  44)
* scm_must_realloc:                      Creating Instances.  (line  56)
* scm_nconc2last:                        Fly Evaluation.      (line  32)
* SCM_NCONSP:                            Pair Data.           (line  25)
* SCM_NEWCELL:                           Pair Data.           (line  28)
* scm_newline:                           Writing.             (line  23)
* SCM_NEWSMOB:                           Creating Instances.  (line  18)
* SCM_NEWSMOB2:                          Creating Instances.  (line  20)
* SCM_NEWSMOB3:                          Creating Instances.  (line  22)
* SCM_NFALSEP:                           Boolean Data.        (line  13)
* scm_nice:                              Processes.           (line 234)
* scm_nil_car:                           Emacs Lisp Support.  (line   8)
* scm_nil_cdr:                           Emacs Lisp Support.  (line  13)
* scm_nil_cons:                          Emacs Lisp Support.  (line  18)
* SCM_NIMP:                              Immediates vs Non-immediates.
                                                              (line  21)
* SCM_NINUMP:                            Integer Data.        (line  20)
* scm_noop:                              Asyncs.              (line  63)
* scm_not:                               Booleans.            (line  60)
* scm_ntohl:                             Network Sockets and Communication.
                                                              (line 285)
* scm_ntohs:                             Network Sockets and Communication.
                                                              (line 273)
* scm_null:                              Emacs Lisp Support.  (line  27)
* scm_null_p:                            List Predicates.     (line  22)
* scm_number_p <1>:                      Complex Numbers.     (line  30)
* scm_number_p:                          Numerical Tower.     (line  35)
* scm_number_to_string:                  Conversion.          (line   8)
* scm_object_address:                    Garbage Collection.  (line  19)
* scm_object_properties:                 Old-fashioned Properties.
                                                              (line  18)
* scm_object_property:                   Old-fashioned Properties.
                                                              (line  26)
* scm_object_to_string:                  General Conversion.  (line  20)
* scm_odd_p:                             Integer Operations.  (line   8)
* scm_open:                              Ports and File Descriptors.
                                                              (line 125)
* scm_open_fdes:                         Ports and File Descriptors.
                                                              (line 154)
* scm_open_file:                         File Ports.          (line  12)
* scm_open_input_string:                 String Ports.        (line  34)
* scm_open_output_string:                String Ports.        (line  41)
* scm_opendir:                           File System.         (line 185)
* scm_operator_p:                        Objects.             (line  12)
* scm_output_port_p:                     Ports.               (line  27)
* SCM_PACK:                              Relationship between SCM and scm_t_bits.
                                                              (line  29)
* scm_pair_p:                            Pairs.               (line  53)
* scm_parse_path:                        Build Config.        (line  63)
* scm_pause:                             Signals.             (line  89)
* scm_peek_char:                         Reading.             (line  27)
* scm_pipe:                              Ports and File Descriptors.
                                                              (line 187)
* scm_port_closed_p:                     Closing.             (line  34)
* scm_port_column:                       Reading.             (line  63)
* scm_port_filename:                     File Ports.          (line 125)
* scm_port_for_each:                     Ports and File Descriptors.
                                                              (line 273)
* scm_port_line:                         Reading.             (line  64)
* scm_port_mode:                         File Ports.          (line 118)
* scm_port_p:                            Ports.               (line  32)
* scm_port_revealed:                     Ports and File Descriptors.
                                                              (line  59)
* scm_port_with_print_state:             Writing.             (line  28)
* scm_primitive_eval:                    Fly Evaluation.      (line  46)
* scm_primitive_exit:                    Processes.           (line 184)
* scm_primitive_load:                    Loading.             (line  18)
* scm_primitive_load_path:               Loading.             (line  28)
* scm_primitive_make_property:           Property Primitives. (line   8)
* scm_primitive_move_to_fdes:            Ports and File Descriptors.
                                                              (line  99)
* scm_primitive_property_del_x:          Property Primitives. (line  26)
* scm_primitive_property_ref:            Property Primitives. (line  14)
* scm_primitive_property_set_x:          Property Primitives. (line  22)
* scm_print_options <1>:                 Low level options interfaces.
                                                              (line  14)
* scm_print_options:                     Writing.             (line  33)
* scm_procedure:                         Procedures with Setters.
                                                              (line  55)
* scm_procedure_documentation:           Procedure Properties.
                                                              (line  69)
* scm_procedure_environment:             Procedure Properties.
                                                              (line  46)
* scm_procedure_name:                    Procedure Properties.
                                                              (line  38)
* scm_procedure_p <1>:                   Procedure Properties.
                                                              (line  22)
* scm_procedure_p:                       Procedures.          (line  15)
* scm_procedure_properties:              Procedure Properties.
                                                              (line  50)
* scm_procedure_property:                Procedure Properties.
                                                              (line  54)
* scm_procedure_source:                  Procedure Properties.
                                                              (line  42)
* scm_procedure_with_setter_p:           Procedures with Setters.
                                                              (line  50)
* SCM_PROCPROPS:                         Closures.            (line  22)
* scm_program_arguments:                 Runtime Environment. (line   9)
* scm_promise_p:                         Delayed Evaluation.  (line  10)
* scm_putenv:                            Runtime Environment. (line  42)
* scm_raise:                             Signals.             (line  39)
* scm_random:                            Random.              (line  12)
* scm_random_exp:                        Random.              (line  26)
* scm_random_hollow_sphere_x:            Random.              (line  32)
* scm_random_normal:                     Random.              (line  39)
* scm_random_normal_vector_x:            Random.              (line  46)
* scm_random_solid_sphere_x:             Random.              (line  52)
* scm_random_uniform:                    Random.              (line  60)
* scm_read:                              Scheme Read.         (line   8)
* scm_read_and_eval_x:                   Strange Eval.        (line  31)
* scm_read_char:                         Reading.             (line  21)
* scm_read_delimited_x:                  Line/Delimited.      (line  77)
* scm_read_hash_extend:                  Reader Extensions.   (line   8)
* scm_read_line:                         Line/Delimited.      (line  93)
* scm_read_only_string_p:                Read Only Strings.   (line  31)
* scm_read_options <1>:                  Low level options interfaces.
                                                              (line  12)
* scm_read_options:                      Scheme Read.         (line  36)
* scm_read_string_x_partial:             Block Reading and Writing.
                                                              (line  17)
* scm_readdir:                           File System.         (line 194)
* scm_readlink:                          File System.         (line 111)
* scm_real_p:                            Reals and Rationals. (line  46)
* scm_recv:                              Network Sockets and Communication.
                                                              (line 193)
* scm_recvfrom:                          Network Sockets and Communication.
                                                              (line 222)
* scm_redirect_port:                     Ports and File Descriptors.
                                                              (line 243)
* scm_regexp_exec:                       Regexp Functions.    (line  83)
* scm_regexp_p:                          Regexp Functions.    (line 117)
* scm_release_arbiter:                   Arbiters.            (line  27)
* scm_remove_hook_x:                     Hook Reference.      (line  50)
* scm_rename:                            File System.         (line 157)
* scm_reset_hook_x:                      Hook Reference.      (line  55)
* scm_resolve_module:                    Accessing Modules from C.
                                                              (line  76)
* scm_restore_signals:                   Signals.             (line  73)
* scm_restricted_vector_sort_x:          Sorting.             (line  89)
* SCM_RETURN_NEWSMOB:                    Creating Instances.  (line  31)
* SCM_RETURN_NEWSMOB2:                   Creating Instances.  (line  33)
* SCM_RETURN_NEWSMOB3:                   Creating Instances.  (line  35)
* scm_reverse:                           Append/Reverse.      (line  36)
* scm_reverse_x:                         Append/Reverse.      (line  41)
* scm_rewinddir:                         File System.         (line 200)
* scm_rmdir:                             File System.         (line 180)
* scm_round:                             Arithmetic.          (line  55)
* scm_run_asyncs:                        Asyncs.              (line  44)
* scm_run_hook:                          Hook Reference.      (line  64)
* scm_search_path:                       Build Config.        (line  69)
* scm_seed_to_random_state:              Random.              (line  64)
* scm_seek:                              Random Access.       (line   8)
* scm_select:                            Ports and File Descriptors.
                                                              (line 350)
* scm_send:                              Network Sockets and Communication.
                                                              (line 210)
* scm_sendto:                            Network Sockets and Communication.
                                                              (line 246)
* scm_set_car_x:                         Pairs.               (line  77)
* scm_set_cdr_x:                         Pairs.               (line  82)
* SCM_SET_CELL_OBJECT:                   Accessing Cell Entries.
                                                              (line  57)
* SCM_SET_CELL_TYPE:                     Heap Cell Type Information.
                                                              (line  18)
* SCM_SET_CELL_WORD:                     Accessing Cell Entries.
                                                              (line  40)
* scm_set_current_error_port:            Default Ports.       (line  29)
* scm_set_current_input_port:            Default Ports.       (line  27)
* scm_set_current_module:                Accessing Modules from C.
                                                              (line  16)
* scm_set_current_output_port:           Default Ports.       (line  28)
* scm_set_object_procedure_x:            Objects.             (line  16)
* scm_set_object_properties_x:           Old-fashioned Properties.
                                                              (line  22)
* scm_set_object_property_x:             Old-fashioned Properties.
                                                              (line  30)
* scm_set_port_column_x:                 Reading.             (line  77)
* scm_set_port_filename_x:               File Ports.          (line 132)
* scm_set_port_line_x:                   Reading.             (line  78)
* scm_set_port_revealed_x:               Ports and File Descriptors.
                                                              (line  63)
* scm_set_procedure_properties_x:        Procedure Properties.
                                                              (line  58)
* scm_set_procedure_property_x:          Procedure Properties.
                                                              (line  62)
* scm_set_smob_equalp:                   Describing a New Type.
                                                              (line  87)
* scm_set_smob_free:                     Describing a New Type.
                                                              (line  75)
* scm_set_smob_mark:                     Describing a New Type.
                                                              (line  69)
* scm_set_smob_print:                    Describing a New Type.
                                                              (line  81)
* scm_set_source_properties_x:           Procedure Properties.
                                                              (line  80)
* scm_set_source_property_x:             Procedure Properties.
                                                              (line  85)
* scm_set_struct_vtable_name_x:          Vtables.             (line  96)
* SCM_SETCAR:                            Pair Data.           (line  64)
* SCM_SETCDR:                            Pair Data.           (line  67)
* scm_setegid:                           Processes.           (line  87)
* scm_seteuid:                           Processes.           (line  80)
* scm_setgid:                            Processes.           (line  74)
* scm_setgrent:                          User Information.    (line 101)
* scm_sethost:                           Network Databases.   (line  81)
* scm_sethostname:                       System Identification.
                                                              (line  39)
* scm_setitimer:                         Signals.             (line 108)
* scm_setlocale:                         Locales.             (line   8)
* scm_setnet:                            Network Databases.   (line 135)
* scm_setpgid:                           Processes.           (line  99)
* scm_setpriority:                       Processes.           (line 240)
* SCM_SETPROCPROPS:                      Closures.            (line  26)
* scm_setproto:                          Network Databases.   (line 184)
* scm_setpwent:                          User Information.    (line  55)
* scm_setserv:                           Network Databases.   (line 248)
* scm_setsid:                            Processes.           (line 106)
* scm_setsockopt:                        Network Sockets and Communication.
                                                              (line  52)
* scm_setuid:                            Processes.           (line  68)
* scm_setvbuf:                           Ports and File Descriptors.
                                                              (line 282)
* scm_shared_array_increments:           Conventional Arrays. (line  89)
* scm_shared_array_offset:               Conventional Arrays. (line  94)
* scm_shared_array_root:                 Conventional Arrays. (line  98)
* scm_shell:                             Guile Initialization Functions.
                                                              (line  78)
* scm_shutdown:                          Network Sockets and Communication.
                                                              (line  64)
* scm_sigaction:                         Signals.             (line  44)
* scm_simple_format:                     Writing.             (line  39)
* scm_sleep:                             Signals.             (line  95)
* scm_sloppy_assoc:                      Sloppy Alist Functions.
                                                              (line  55)
* scm_sloppy_assq:                       Sloppy Alist Functions.
                                                              (line  45)
* scm_sloppy_assv:                       Sloppy Alist Functions.
                                                              (line  50)
* scm_sloppy_member:                     Sloppy Membership.   (line  25)
* scm_sloppy_memq:                       Sloppy Membership.   (line  13)
* scm_sloppy_memv:                       Sloppy Membership.   (line  19)
* SCM_SNAME:                             Subrs.               (line  19)
* SCM_SNARF_INIT:                        Writing your own snarfing macros.
                                                              (line  16)
* scm_socket:                            Network Sockets and Communication.
                                                              (line  19)
* scm_socketpair:                        Network Sockets and Communication.
                                                              (line  34)
* scm_sort:                              Sorting.             (line  49)
* scm_sort_list:                         Sorting.             (line  77)
* scm_sort_list_x:                       Sorting.             (line  82)
* scm_sort_x:                            Sorting.             (line  55)
* scm_sorted_p:                          Sorting.             (line  43)
* scm_source_properties:                 Procedure Properties.
                                                              (line  90)
* scm_source_property:                   Procedure Properties.
                                                              (line  94)
* scm_stable_sort:                       Sorting.             (line  62)
* scm_stable_sort_x:                     Sorting.             (line  67)
* scm_stack_id:                          Examining the Stack. (line  12)
* scm_stack_length:                      Examining the Stack. (line  16)
* scm_stack_p:                           Examining the Stack. (line   8)
* scm_stack_ref:                         Examining the Stack. (line  20)
* scm_stat:                              File System.         (line  39)
* scm_status_exit_val:                   Processes.           (line 158)
* scm_status_stop_sig:                   Processes.           (line 169)
* scm_status_term_sig:                   Processes.           (line 164)
* scm_strerror:                          Error Reporting.     (line  30)
* scm_strftime:                          Time.                (line  90)
* scm_string:                            String Constructors. (line  12)
* scm_string_append:                     Appending Strings.   (line  11)
* scm_string_capitalize:                 Alphabetic Case Mapping.
                                                              (line  35)
* scm_string_capitalize_x:               Alphabetic Case Mapping.
                                                              (line  40)
* SCM_STRING_CHARS:                      Vector Data.         (line  36)
* scm_string_ci_to_symbol:               Symbol Primitives.   (line  55)
* scm_string_copy:                       String Selection.    (line  21)
* scm_string_downcase:                   Alphabetic Case Mapping.
                                                              (line  23)
* scm_string_downcase_x:                 Alphabetic Case Mapping.
                                                              (line  28)
* scm_string_fill_x:                     String Modification. (line  17)
* scm_string_index:                      String Searching.    (line  11)
* scm_string_length:                     String Selection.    (line  12)
* SCM_STRING_LENGTH:                     Vector Data.         (line  27)
* scm_string_null_p:                     String Predicates.   (line  15)
* scm_string_p:                          String Predicates.   (line  11)
* scm_string_ref:                        String Selection.    (line  16)
* scm_string_rindex:                     String Searching.    (line  27)
* scm_string_set_x:                      String Modification. (line  12)
* scm_string_split:                      List/String Conversion.
                                                              (line  19)
* scm_string_to_list:                    List/String Conversion.
                                                              (line  13)
* scm_string_to_number:                  Conversion.          (line  13)
* scm_string_to_obarray_symbol:          Obarray Symbols.     (line  51)
* scm_string_to_symbol:                  Symbol Primitives.   (line  47)
* scm_string_upcase:                     Alphabetic Case Mapping.
                                                              (line  11)
* scm_string_upcase_x:                   Alphabetic Case Mapping.
                                                              (line  16)
* SCM_STRINGP:                           Vector Data.         (line  20)
* scm_strptime:                          Time.                (line 103)
* scm_struct_p:                          Structure Basics.    (line  40)
* scm_struct_ref:                        Structure Basics.    (line  45)
* scm_struct_set_x:                      Structure Basics.    (line  46)
* scm_struct_vtable:                     Vtables.             (line  15)
* scm_struct_vtable_name:                Vtables.             (line  92)
* scm_struct_vtable_p:                   Vtables.             (line  19)
* scm_struct_vtable_tag:                 Vtables.             (line 100)
* scm_substring:                         String Selection.    (line  25)
* scm_substring_fill_x:                  String Modification. (line  22)
* scm_substring_move_x:                  String Modification. (line  31)
* scm_symbol_binding:                    Obarray Symbols.     (line  65)
* scm_symbol_bound_p:                    Obarray Symbols.     (line  72)
* SCM_SYMBOL_CHARS:                      Vector Data.         (line  37)
* scm_symbol_fref:                       Symbol Props.        (line  31)
* scm_symbol_fset_x:                     Symbol Props.        (line  35)
* scm_symbol_hash:                       Symbol Keys.         (line  55)
* scm_symbol_interned_p:                 Obarray Symbols.     (line  39)
* SCM_SYMBOL_LENGTH:                     Vector Data.         (line  28)
* scm_symbol_p:                          Symbol Primitives.   (line  11)
* scm_symbol_pref:                       Symbol Props.        (line  39)
* scm_symbol_pset_x:                     Symbol Props.        (line  43)
* scm_symbol_set_x:                      Obarray Symbols.     (line  80)
* scm_symbol_to_string:                  Symbol Primitives.   (line  20)
* SCM_SYMBOLP:                           Vector Data.         (line  23)
* scm_symlink:                           File System.         (line 168)
* scm_sync:                              File System.         (line 219)
* scm_sys_atan2:                         Primitive Numerics.  (line  42)
* scm_sys_expt:                          Primitive Numerics.  (line  19)
* scm_sys_library_dir:                   Build Config.        (line  41)
* scm_sys_make_void_port:                Void Ports.          (line  11)
* scm_sys_package_data_dir:              Build Config.        (line  35)
* scm_sys_search_load_path:              Loading.             (line  34)
* scm_sys_site_dir:                      Build Config.        (line  50)
* scm_system:                            Processes.           (line 174)
* scm_system_async:                      Asyncs.              (line  27)
* scm_system_async_mark:                 Asyncs.              (line  36)
* scm_tcgetpgrp:                         Terminals and Ptys.  (line  23)
* scm_tcsetpgrp:                         Terminals and Ptys.  (line  36)
* scm_throw:                             Throw.               (line  16)
* scm_thunk_p:                           Procedure Properties.
                                                              (line  30)
* scm_times:                             Time.                (line 118)
* scm_tmpnam:                            File System.         (line 239)
* scm_transpose_array:                   Conventional Arrays. (line 102)
* scm_truncate:                          Arithmetic.          (line  54)
* scm_truncate_file:                     Random Access.       (line  37)
* scm_try_arbiter:                       Arbiters.            (line  22)
* scm_ttyname:                           Terminals and Ptys.  (line  13)
* scm_tzset:                             Time.                (line  83)
* scm_umask:                             Processes.           (line  17)
* scm_uname:                             System Identification.
                                                              (line  11)
* SCM_UNBNDP:                            Unique Values.       (line  39)
* SCM_UNDEFINED:                         Unique Values.       (line  28)
* scm_uniform_array_read_x:              Uniform Arrays.      (line  89)
* scm_uniform_array_write:               Uniform Arrays.      (line 107)
* scm_uniform_vector_length:             Uniform Arrays.      (line  76)
* scm_uniform_vector_ref:                Conventional Arrays. (line  59)
* scm_unintern_symbol:                   Obarray Symbols.     (line  44)
* scm_unmask_signals:                    Asyncs.              (line  59)
* scm_unmemoize:                         Decoding Memoized Source Expressions.
                                                              (line  12)
* SCM_UNPACK:                            Relationship between SCM and scm_t_bits.
                                                              (line  24)
* scm_unread_char <1>:                   Ports and File Descriptors.
                                                              (line 174)
* scm_unread_char:                       Reading.             (line  33)
* scm_unread_string:                     Reading.             (line  40)
* SCM_UNSPECIFIED:                       Unique Values.       (line  19)
* scm_usleep:                            Signals.             (line 101)
* scm_utime:                             File System.         (line 138)
* scm_values:                            Multiple Values.     (line  22)
* scm_variable_bound_p:                  Variables.           (line  52)
* scm_variable_p:                        Variables.           (line  67)
* scm_variable_ref:                      Variables.           (line  57)
* scm_variable_set_x:                    Variables.           (line  62)
* scm_vector:                            Vector Creation.     (line  15)
* SCM_VECTOR_BASE:                       Vector Data.         (line  32)
* scm_vector_fill_x:                     Vector Accessors.    (line  44)
* scm_vector_length:                     Vector Accessors.    (line  12)
* SCM_VECTOR_LENGTH:                     Vector Data.         (line  26)
* scm_vector_move_left_x:                Vector Accessors.    (line  50)
* scm_vector_move_right_x:               Vector Accessors.    (line  62)
* scm_vector_p:                          Vector Creation.     (line  51)
* scm_vector_ref:                        Vector Accessors.    (line  16)
* scm_vector_set_x:                      Vector Accessors.    (line  36)
* scm_vector_to_list:                    Vector Creation.     (line  30)
* SCM_VECTORP:                           Vector Data.         (line  17)
* scm_version:                           Build Config.        (line  15)
* scm_waitpid:                           Processes.           (line 113)
* scm_weak_key_hash_table_p:             Weak key hashes.     (line  22)
* scm_weak_value_hash_table_p:           Weak key hashes.     (line  23)
* scm_weak_vector:                       Weak vectors.        (line  18)
* scm_weak_vector_p:                     Weak vectors.        (line  25)
* scm_with_fluids:                       Fluids.              (line  56)
* scm_with_traps:                        Using Traps.         (line   8)
* scm_write_char:                        Writing.             (line  49)
* scm_write_line:                        Line/Delimited.      (line  63)
* scm_write_string_partial:              Block Reading and Writing.
                                                              (line  50)
* search-path:                           Build Config.        (line  68)
* second:                                SRFI-1 Selectors.    (line   8)
* seed->random-state:                    Random.              (line  63)
* seek:                                  Random Access.       (line   7)
* select:                                Ports and File Descriptors.
                                                              (line 349)
* send:                                  Network Sockets and Communication.
                                                              (line 209)
* sendto:                                Network Sockets and Communication.
                                                              (line 245)
* servent:aliases:                       Network Databases.   (line 197)
* servent:name:                          Network Databases.   (line 194)
* servent:port:                          Network Databases.   (line 200)
* servent:proto:                         Network Databases.   (line 203)
* set-batch-mode?!:                      Dynamic Roots.       (line  98)
* set-car!:                              Pairs.               (line  76)
* set-cdr!:                              Pairs.               (line  81)
* set-current-error-port:                Default Ports.       (line  26)
* set-current-input-port:                Default Ports.       (line  24)
* set-current-output-port:               Default Ports.       (line  25)
* set-object-procedure!:                 Objects.             (line  15)
* set-object-properties!:                Old-fashioned Properties.
                                                              (line  21)
* set-object-property!:                  Old-fashioned Properties.
                                                              (line  29)
* set-port-column!:                      Reading.             (line  75)
* set-port-filename!:                    File Ports.          (line 131)
* set-port-line!:                        Reading.             (line  76)
* set-port-revealed!:                    Ports and File Descriptors.
                                                              (line  62)
* set-procedure-properties!:             Procedure Properties.
                                                              (line  57)
* set-procedure-property!:               Procedure Properties.
                                                              (line  61)
* set-source-properties!:                Procedure Properties.
                                                              (line  79)
* set-source-property!:                  Procedure Properties.
                                                              (line  84)
* set-struct-vtable-name!:               Vtables.             (line  95)
* set-symbol-property!:                  Symbol Props.        (line  53)
* setegid:                               Processes.           (line  86)
* setenv:                                Runtime Environment. (line  21)
* seteuid:                               Processes.           (line  79)
* setgid:                                Processes.           (line  73)
* setgr:                                 User Information.    (line 100)
* setgrent:                              User Information.    (line  87)
* sethost:                               Network Databases.   (line  80)
* sethostent:                            Network Databases.   (line  62)
* sethostname:                           System Identification.
                                                              (line  38)
* setitimer:                             Signals.             (line 106)
* setlocale:                             Locales.             (line   7)
* setnet:                                Network Databases.   (line 134)
* setnetent:                             Network Databases.   (line 119)
* setpgid:                               Processes.           (line  98)
* setpriority:                           Processes.           (line 239)
* setproto:                              Network Databases.   (line 183)
* setprotoent:                           Network Databases.   (line 168)
* setpw:                                 User Information.    (line  54)
* setpwent:                              User Information.    (line  41)
* setserv:                               Network Databases.   (line 247)
* setservent:                            Network Databases.   (line 232)
* setsid:                                Processes.           (line 105)
* setsockopt:                            Network Sockets and Communication.
                                                              (line  51)
* setter:                                Procedures with Setters.
                                                              (line  59)
* setuid:                                Processes.           (line  67)
* setvbuf:                               Ports and File Descriptors.
                                                              (line 281)
* seventh:                               SRFI-1 Selectors.    (line  13)
* shared-array-increments:               Conventional Arrays. (line  88)
* shared-array-offset:                   Conventional Arrays. (line  93)
* shared-array-root:                     Conventional Arrays. (line  97)
* shutdown:                              Network Sockets and Communication.
                                                              (line  63)
* sigaction:                             Signals.             (line  43)
* signal-condition-variable:             Low level thread primitives.
                                                              (line  48)
* simple-format:                         Writing.             (line  38)
* sin:                                   Scientific.          (line  16)
* sinh:                                  Scientific.          (line  44)
* sixth:                                 SRFI-1 Selectors.    (line  12)
* sleep:                                 Signals.             (line  94)
* sloppy-assoc:                          Sloppy Alist Functions.
                                                              (line  54)
* sloppy-assq:                           Sloppy Alist Functions.
                                                              (line  44)
* sloppy-assv:                           Sloppy Alist Functions.
                                                              (line  49)
* sloppy-member:                         Sloppy Membership.   (line  24)
* sloppy-memq:                           Sloppy Membership.   (line  12)
* sloppy-memv:                           Sloppy Membership.   (line  18)
* socket:                                Network Sockets and Communication.
                                                              (line  18)
* socketpair:                            Network Sockets and Communication.
                                                              (line  33)
* sort:                                  Sorting.             (line  48)
* sort!:                                 Sorting.             (line  54)
* sort-list:                             Sorting.             (line  76)
* sort-list!:                            Sorting.             (line  81)
* sorted?:                               Sorting.             (line  42)
* source-properties:                     Procedure Properties.
                                                              (line  89)
* source-property:                       Procedure Properties.
                                                              (line  93)
* span:                                  SRFI-1 Searching.    (line  31)
* span!:                                 SRFI-1 Searching.    (line  32)
* split-at:                              SRFI-1 Selectors.    (line  42)
* split-at!:                             SRFI-1 Selectors.    (line  43)
* sqrt:                                  Scientific.          (line  10)
* stable-sort:                           Sorting.             (line  61)
* stable-sort!:                          Sorting.             (line  66)
* stack-id:                              Examining the Stack. (line  11)
* stack-length:                          Examining the Stack. (line  15)
* stack-ref:                             Examining the Stack. (line  19)
* stack?:                                Examining the Stack. (line   7)
* start-stack:                           Starting a New Stack.
                                                              (line   7)
* stat:                                  File System.         (line  38)
* status:exit-val:                       Processes.           (line 157)
* status:stop-sig:                       Processes.           (line 168)
* status:term-sig:                       Processes.           (line 163)
* strerror:                              Error Reporting.     (line  29)
* strftime:                              Time.                (line  89)
* string:                                String Constructors. (line  10)
* string->char-set:                      SRFI-14 Creating Character Sets.
                                                              (line  24)
* string->char-set!:                     SRFI-14 Creating Character Sets.
                                                              (line  25)
* string->list <1>:                      SRFI-13 List/String Conversion.
                                                              (line  12)
* string->list:                          List/String Conversion.
                                                              (line  12)
* string->number:                        Conversion.          (line  12)
* string->obarray-symbol:                Obarray Symbols.     (line  49)
* string->symbol:                        Symbol Primitives.   (line  46)
* string-any:                            SRFI-13 Predicates.  (line  11)
* string-append:                         Appending Strings.   (line  10)
* string-append/shared:                  SRFI-13 Reverse/Append.
                                                              (line  18)
* string-capitalize:                     Alphabetic Case Mapping.
                                                              (line  34)
* string-capitalize!:                    Alphabetic Case Mapping.
                                                              (line  39)
* string-ci->symbol:                     Symbol Primitives.   (line  54)
* string-ci<:                            SRFI-13 Comparison.  (line  37)
* string-ci<=:                           SRFI-13 Comparison.  (line  39)
* string-ci<=?:                          String Comparison.   (line  46)
* string-ci<>:                           SRFI-13 Comparison.  (line  36)
* string-ci<?:                           String Comparison.   (line  42)
* string-ci=:                            SRFI-13 Comparison.  (line  35)
* string-ci=?:                           String Comparison.   (line  37)
* string-ci>:                            SRFI-13 Comparison.  (line  38)
* string-ci>=:                           SRFI-13 Comparison.  (line  40)
* string-ci>=?:                          String Comparison.   (line  55)
* string-ci>?:                           String Comparison.   (line  51)
* string-compare:                        SRFI-13 Comparison.  (line  16)
* string-compare-ci:                     SRFI-13 Comparison.  (line  18)
* string-concatenate:                    SRFI-13 Reverse/Append.
                                                              (line  22)
* string-concatenate-reverse:            SRFI-13 Reverse/Append.
                                                              (line  30)
* string-concatenate-reverse/shared:     SRFI-13 Reverse/Append.
                                                              (line  43)
* string-concatenate/shared:             SRFI-13 Reverse/Append.
                                                              (line  26)
* string-contains:                       SRFI-13 Searching.   (line  44)
* string-contains-ci:                    SRFI-13 Searching.   (line  45)
* string-copy <1>:                       SRFI-13 Selection.   (line  16)
* string-copy:                           String Selection.    (line  20)
* string-copy!:                          SRFI-13 Selection.   (line  24)
* string-count:                          SRFI-13 Searching.   (line  35)
* string-delete:                         SRFI-13 Filtering/Deleting.
                                                              (line  17)
* string-downcase <1>:                   SRFI-13 Case Mapping.
                                                              (line  16)
* string-downcase:                       Alphabetic Case Mapping.
                                                              (line  22)
* string-downcase! <1>:                  SRFI-13 Case Mapping.
                                                              (line  17)
* string-downcase!:                      Alphabetic Case Mapping.
                                                              (line  27)
* string-drop:                           SRFI-13 Selection.   (line  36)
* string-drop-right:                     SRFI-13 Selection.   (line  37)
* string-every:                          SRFI-13 Predicates.  (line  34)
* string-fill! <1>:                      SRFI-13 Modification.
                                                              (line  13)
* string-fill!:                          String Modification. (line  16)
* string-filter:                         SRFI-13 Filtering/Deleting.
                                                              (line  10)
* string-fold:                           SRFI-13 Fold/Unfold/Map.
                                                              (line  22)
* string-fold-right:                     SRFI-13 Fold/Unfold/Map.
                                                              (line  23)
* string-for-each:                       SRFI-13 Fold/Unfold/Map.
                                                              (line  50)
* string-hash:                           SRFI-13 Comparison.  (line  45)
* string-hash-ci:                        SRFI-13 Comparison.  (line  46)
* string-index <1>:                      SRFI-13 Searching.   (line  10)
* string-index:                          String Searching.    (line  10)
* string-index-right:                    SRFI-13 Searching.   (line  11)
* string-join:                           SRFI-13 List/String Conversion.
                                                              (line  20)
* string-length:                         String Selection.    (line  11)
* string-map:                            SRFI-13 Fold/Unfold/Map.
                                                              (line  11)
* string-map!:                           SRFI-13 Fold/Unfold/Map.
                                                              (line  16)
* string-match:                          Regexp Functions.    (line  15)
* string-null?:                          String Predicates.   (line  14)
* string-pad:                            SRFI-13 Selection.   (line  40)
* string-pad-right:                      SRFI-13 Selection.   (line  41)
* string-prefix-ci?:                     SRFI-13 Prefixes/Suffixes.
                                                              (line  24)
* string-prefix-length:                  SRFI-13 Prefixes/Suffixes.
                                                              (line  12)
* string-prefix-length-ci:               SRFI-13 Prefixes/Suffixes.
                                                              (line  14)
* string-prefix?:                        SRFI-13 Prefixes/Suffixes.
                                                              (line  23)
* string-ref:                            String Selection.    (line  15)
* string-replace:                        SRFI-13 Miscellaneous.
                                                              (line  11)
* string-reverse:                        SRFI-13 Reverse/Append.
                                                              (line  10)
* string-reverse!:                       SRFI-13 Reverse/Append.
                                                              (line  11)
* string-rindex:                         String Searching.    (line  26)
* string-set!:                           String Modification. (line  11)
* string-skip:                           SRFI-13 Searching.   (line  22)
* string-skip-right:                     SRFI-13 Searching.   (line  23)
* string-split:                          List/String Conversion.
                                                              (line  18)
* string-suffix-ci?:                     SRFI-13 Prefixes/Suffixes.
                                                              (line  26)
* string-suffix-length:                  SRFI-13 Prefixes/Suffixes.
                                                              (line  16)
* string-suffix-length-ci:               SRFI-13 Prefixes/Suffixes.
                                                              (line  18)
* string-suffix?:                        SRFI-13 Prefixes/Suffixes.
                                                              (line  25)
* string-tabulate:                       SRFI-13 Constructors.
                                                              (line  11)
* string-take:                           SRFI-13 Selection.   (line  32)
* string-take-right:                     SRFI-13 Selection.   (line  33)
* string-titlecase:                      SRFI-13 Case Mapping.
                                                              (line  21)
* string-titlecase!:                     SRFI-13 Case Mapping.
                                                              (line  22)
* string-tokenize:                       SRFI-13 Miscellaneous.
                                                              (line  15)
* string-trim:                           SRFI-13 Selection.   (line  47)
* string-trim-both:                      SRFI-13 Selection.   (line  49)
* string-trim-right:                     SRFI-13 Selection.   (line  48)
* string-unfold:                         SRFI-13 Fold/Unfold/Map.
                                                              (line  29)
* string-unfold-right:                   SRFI-13 Fold/Unfold/Map.
                                                              (line  30)
* string-upcase <1>:                     SRFI-13 Case Mapping.
                                                              (line  11)
* string-upcase:                         Alphabetic Case Mapping.
                                                              (line  10)
* string-upcase! <1>:                    SRFI-13 Case Mapping.
                                                              (line  12)
* string-upcase!:                        Alphabetic Case Mapping.
                                                              (line  15)
* string-xcopy!:                         SRFI-13 Replicate/Rotate.
                                                              (line  28)
* string<:                               SRFI-13 Comparison.  (line  27)
* string<=:                              SRFI-13 Comparison.  (line  29)
* string<=?:                             String Comparison.   (line  25)
* string<>:                              SRFI-13 Comparison.  (line  26)
* string<?:                              String Comparison.   (line  21)
* string=:                               SRFI-13 Comparison.  (line  25)
* string=?:                              String Comparison.   (line  12)
* string>:                               SRFI-13 Comparison.  (line  28)
* string>=:                              SRFI-13 Comparison.  (line  30)
* string>=?:                             String Comparison.   (line  33)
* string>?:                              String Comparison.   (line  29)
* string?:                               String Predicates.   (line  10)
* strptime:                              Time.                (line 102)
* struct-ref:                            Structure Basics.    (line  43)
* struct-set!:                           Structure Basics.    (line  44)
* struct-vtable:                         Vtables.             (line  14)
* struct-vtable-name:                    Vtables.             (line  91)
* struct-vtable-tag:                     Vtables.             (line  99)
* struct-vtable?:                        Vtables.             (line  18)
* struct?:                               Structure Basics.    (line  39)
* substring:                             String Selection.    (line  24)
* substring-fill!:                       String Modification. (line  21)
* substring-move!:                       String Modification. (line  30)
* substring/shared:                      SRFI-13 Selection.   (line  20)
* symbol->keyword:                       Keyword Procedures.  (line  10)
* symbol->string:                        Symbol Primitives.   (line  19)
* symbol-binding:                        Obarray Symbols.     (line  64)
* symbol-bound?:                         Obarray Symbols.     (line  71)
* symbol-fref:                           Symbol Props.        (line  30)
* symbol-fset!:                          Symbol Props.        (line  34)
* symbol-hash:                           Symbol Keys.         (line  54)
* symbol-interned?:                      Obarray Symbols.     (line  38)
* symbol-pref:                           Symbol Props.        (line  38)
* symbol-prefix-proc:                    Using Guile Modules. (line  49)
* symbol-property:                       Symbol Props.        (line  46)
* symbol-property-remove!:               Symbol Props.        (line  58)
* symbol-pset!:                          Symbol Props.        (line  42)
* symbol-set!:                           Obarray Symbols.     (line  79)
* symbol?:                               Symbol Primitives.   (line  10)
* symlink:                               File System.         (line 167)
* sync:                                  File System.         (line 218)
* system:                                Processes.           (line 173)
* system-async:                          Asyncs.              (line  26)
* system-async-mark:                     Asyncs.              (line  35)
* TAGvector:                             SRFI-4 - Procedures. (line  26)
* TAGvector->list:                       SRFI-4 - Procedures. (line  41)
* TAGvector-length:                      SRFI-4 - Procedures. (line  31)
* TAGvector-ref:                         SRFI-4 - Procedures. (line  34)
* TAGvector?:                            SRFI-4 - Procedures. (line  17)
* take:                                  SRFI-1 Selectors.    (line  22)
* take!:                                 SRFI-1 Selectors.    (line  23)
* take-right:                            SRFI-1 Selectors.    (line  32)
* take-while:                            SRFI-1 Searching.    (line  19)
* take-while!:                           SRFI-1 Searching.    (line  20)
* tan:                                   Scientific.          (line  22)
* tanh:                                  Scientific.          (line  50)
* tcgetpgrp:                             Terminals and Ptys.  (line  22)
* tcsetpgrp:                             Terminals and Ptys.  (line  35)
* tenth:                                 SRFI-1 Selectors.    (line  16)
* third:                                 SRFI-1 Selectors.    (line   9)
* throw:                                 Throw.               (line  15)
* thunk?:                                Procedure Properties.
                                                              (line  29)
* times:                                 Time.                (line 117)
* tmpnam:                                File System.         (line 238)
* trace:                                 Trace.               (line  12)
* transpose-array:                       Conventional Arrays. (line 101)
* trap-disable <1>:                      User level options interfaces.
                                                              (line  40)
* trap-disable:                          Evaluator Behaviour. (line  48)
* trap-enable <1>:                       User level options interfaces.
                                                              (line  31)
* trap-enable:                           Evaluator Behaviour. (line  47)
* trap-set! <1>:                         User level options interfaces.
                                                              (line  49)
* trap-set!:                             Evaluator Behaviour. (line  49)
* traps <1>:                             User level options interfaces.
                                                              (line  11)
* traps:                                 Evaluator Behaviour. (line  36)
* truncate <1>:                          Random Access.       (line  35)
* truncate:                              Arithmetic.          (line  37)
* truncate-file:                         Random Access.       (line  36)
* try-arbiter:                           Arbiters.            (line  21)
* ttyname:                               Terminals and Ptys.  (line  12)
* tzset:                                 Time.                (line  82)
* uce-range->char-set!:                  SRFI-14 Creating Character Sets.
                                                              (line  41)
* ucs-range->char-set:                   SRFI-14 Creating Character Sets.
                                                              (line  40)
* umask:                                 Processes.           (line  16)
* uname:                                 System Identification.
                                                              (line  10)
* unfold:                                SRFI-1 Fold and Map. (line  36)
* unfold-right:                          SRFI-1 Fold and Map. (line  63)
* unhash-name:                           Garbage Collection.  (line  23)
* uniform-array-read!:                   Uniform Arrays.      (line  86)
* uniform-array-set1!:                   Conventional Arrays. (line  67)
* uniform-array-write:                   Uniform Arrays.      (line 104)
* uniform-vector-fill!:                  Uniform Arrays.      (line  71)
* uniform-vector-length:                 Uniform Arrays.      (line  75)
* uniform-vector-read!:                  Uniform Arrays.      (line  88)
* uniform-vector-ref:                    Conventional Arrays. (line  57)
* uniform-vector-write:                  Uniform Arrays.      (line 106)
* unintern-symbol:                       Obarray Symbols.     (line  43)
* unlink:                                File System.         (line 146)
* unlock-mutex:                          Low level thread primitives.
                                                              (line  38)
* unmask-signals:                        Asyncs.              (line  58)
* unmemoize:                             Decoding Memoized Source Expressions.
                                                              (line  11)
* unread-char <1>:                       Ports and File Descriptors.
                                                              (line 173)
* unread-char:                           Reading.             (line  32)
* unread-string <1>:                     Ports and File Descriptors.
                                                              (line 180)
* unread-string:                         Reading.             (line  39)
* untrace:                               Trace.               (line  18)
* unzip1:                                SRFI-1 Length Append etc.
                                                              (line  33)
* unzip2:                                SRFI-1 Length Append etc.
                                                              (line  34)
* unzip3:                                SRFI-1 Length Append etc.
                                                              (line  35)
* unzip4:                                SRFI-1 Length Append etc.
                                                              (line  36)
* unzip5:                                SRFI-1 Length Append etc.
                                                              (line  37)
* use-modules:                           Using Guile Modules. (line  53)
* use-syntax:                            Using Guile Modules. (line  80)
* usleep:                                Signals.             (line 100)
* utime:                                 File System.         (line 137)
* values:                                Multiple Values.     (line  21)
* variable-bound?:                       Variables.           (line  51)
* variable-ref:                          Variables.           (line  56)
* variable-set!:                         Variables.           (line  61)
* variable?:                             Variables.           (line  66)
* vector:                                Vector Creation.     (line  13)
* vector->list:                          Vector Creation.     (line  29)
* vector-fill!:                          Vector Accessors.    (line  43)
* vector-length:                         Vector Accessors.    (line  11)
* vector-move-left!:                     Vector Accessors.    (line  48)
* vector-move-right!:                    Vector Accessors.    (line  60)
* vector-ref:                            Vector Accessors.    (line  15)
* vector-set!:                           Vector Accessors.    (line  35)
* vector?:                               Vector Creation.     (line  50)
* version:                               Build Config.        (line  10)
* wait-condition-variable:               Low level thread primitives.
                                                              (line  46)
* waitpid:                               Processes.           (line 112)
* weak-key-hash-table?:                  Weak key hashes.     (line  19)
* weak-value-hash-table?:                Weak key hashes.     (line  20)
* weak-vector:                           Weak vectors.        (line  16)
* weak-vector?:                          Weak vectors.        (line  24)
* while:                                 while do.            (line  24)
* with-error-to-file:                    File Ports.          (line 106)
* with-fluids*:                          Fluids.              (line  55)
* with-input-from-file:                  File Ports.          (line  84)
* with-input-from-string:                String Ports.        (line  28)
* with-mutex:                            Higher level thread procedures.
                                                              (line  34)
* with-output-to-file:                   File Ports.          (line  95)
* with-output-to-string:                 String Ports.        (line  23)
* with-traps:                            Using Traps.         (line   7)
* write-char:                            Writing.             (line  48)
* write-line:                            Line/Delimited.      (line  62)
* write-string/partial:                  Block Reading and Writing.
                                                              (line  49)
* xcons:                                 SRFI-1 Constructors. (line   9)
* xsubstring:                            SRFI-13 Replicate/Rotate.
                                                              (line  16)
* yield:                                 Low level thread primitives.
                                                              (line  25)
* zero?:                                 Comparison.          (line  24)
* zip:                                   SRFI-1 Length Append etc.
                                                              (line  27)


File: guile.info,  Node: Variable Index,  Next: Type Index,  Prev: Procedure Index,  Up: Top

Variable Index
**************

This is an alphabetical list of all the important variables and
constants in Guile.

   When looking for a particular variable or constant, please look under
its Scheme name as well as under its C name.  The C name can be
constructed from the Scheme names by a simple transformation described
in the section *Note Transforming Scheme name to C name::.

 [index ]
* Menu:

* %guile-build-info:                     Build Config.        (line  77)
* %load-extensions:                      Loading.             (line  60)
* %load-hook:                            Loading.             (line  42)
* %load-path:                            Build Config.        (line  55)
* *features*:                            Feature Tracking.    (line  12)
* after-gc-hook:                         GC Hooks.            (line  37)
* char-set:ascii:                        SRFI-14 Standard Character Sets.
                                                              (line  54)
* char-set:blank:                        SRFI-14 Standard Character Sets.
                                                              (line  38)
* char-set:digit:                        SRFI-14 Standard Character Sets.
                                                              (line  23)
* char-set:empty:                        SRFI-14 Standard Character Sets.
                                                              (line  57)
* char-set:full:                         SRFI-14 Standard Character Sets.
                                                              (line  60)
* char-set:graphic:                      SRFI-14 Standard Character Sets.
                                                              (line  29)
* char-set:hex-digit:                    SRFI-14 Standard Character Sets.
                                                              (line  51)
* char-set:iso-control:                  SRFI-14 Standard Character Sets.
                                                              (line  42)
* char-set:letter:                       SRFI-14 Standard Character Sets.
                                                              (line  19)
* char-set:letter+digit:                 SRFI-14 Standard Character Sets.
                                                              (line  26)
* char-set:lower-case:                   SRFI-14 Standard Character Sets.
                                                              (line  10)
* char-set:printing:                     SRFI-14 Standard Character Sets.
                                                              (line  32)
* char-set:punctuation:                  SRFI-14 Standard Character Sets.
                                                              (line  45)
* char-set:symbol:                       SRFI-14 Standard Character Sets.
                                                              (line  48)
* char-set:title-case:                   SRFI-14 Standard Character Sets.
                                                              (line  16)
* char-set:upper-case:                   SRFI-14 Standard Character Sets.
                                                              (line  13)
* char-set:whitespace:                   SRFI-14 Standard Character Sets.
                                                              (line  35)
* F_OK:                                  File System.         (line  35)
* INADDR_ANY:                            Network Sockets and Communication.
                                                              (line 121)
* INADDR_BROADCAST:                      Network Sockets and Communication.
                                                              (line 127)
* INADDR_LOOPBACK:                       Network Sockets and Communication.
                                                              (line 124)
* INADDR_NONE:                           Network Sockets and Communication.
                                                              (line 130)
* internal-time-units-per-second:        Time.                (line 113)
* O_APPEND:                              Ports and File Descriptors.
                                                              (line 144)
* O_CREAT:                               Ports and File Descriptors.
                                                              (line 147)
* O_RDONLY:                              Ports and File Descriptors.
                                                              (line 135)
* O_RDWR:                                Ports and File Descriptors.
                                                              (line 141)
* O_WRONLY:                              Ports and File Descriptors.
                                                              (line 138)
* R_OK:                                  File System.         (line  26)
* REG_EXTENDED:                          Rx Regexps.          (line  34)
* REG_ICASE:                             Rx Regexps.          (line  37)
* REG_NEWLINE:                           Rx Regexps.          (line  40)
* REG_NOTBOL:                            Rx Regexps.          (line  54)
* REG_NOTEOL:                            Rx Regexps.          (line  58)
* scm_after_gc_c_hook:                   GC Hooks.            (line  33)
* scm_after_gc_hook:                     GC Hooks.            (line  37)
* scm_after_sweep_c_hook:                GC Hooks.            (line  28)
* scm_before_gc_c_hook:                  GC Hooks.            (line  10)
* scm_before_mark_c_hook:                GC Hooks.            (line  19)
* scm_before_sweep_c_hook:               GC Hooks.            (line  23)
* SCM_BOOL_F:                            Data types and constants defined by gh.
                                                              (line  16)
* SCM_BOOL_T:                            Data types and constants defined by gh.
                                                              (line  15)
* SCM_C_HOOK_AND:                        C Hooks.             (line  40)
* SCM_C_HOOK_NORMAL:                     C Hooks.             (line  31)
* SCM_C_HOOK_OR:                         C Hooks.             (line  35)
* SCM_UNDEFINED:                         Data types and constants defined by gh.
                                                              (line  33)
* SCM_UNSPECIFIED:                       Data types and constants defined by gh.
                                                              (line  28)
* SEEK_CUR:                              Random Access.       (line  17)
* SEEK_END:                              Random Access.       (line  20)
* SEEK_SET:                              Random Access.       (line  14)
* SIGHUP:                                Signals.             (line  32)
* SIGINT:                                Signals.             (line  35)
* W_OK:                                  File System.         (line  29)
* WNOHANG:                               Processes.           (line 139)
* WUNTRACED:                             Processes.           (line 143)
* X_OK:                                  File System.         (line  32)


File: guile.info,  Node: Type Index,  Next: R5RS Index,  Prev: Variable Index,  Up: Top

Type Index
**********

This is an alphabetical list of all the important data types defined in
the Guile Programmers Manual.

 [index ]
* Menu:

* Alist:                                 Association Lists.    (line  6)
* Arrays:                                Arrays.               (line  6)
* Association Lists:                     Association Lists.    (line  6)
* Booleans:                              Booleans.             (line  6)
* Characters:                            Characters.           (line  6)
* Complex numbers:                       Complex Numbers.      (line  6)
* Exact numbers:                         Exactness.            (line  6)
* Hash Tables:                           Hash Tables.          (line  6)
* Hooks:                                 Hooks.                (line  6)
* Inexact numbers:                       Exactness.            (line  6)
* Integer numbers:                       Integers.             (line  6)
* Keywords:                              Keywords.             (line  6)
* Lists:                                 Lists.                (line  6)
* Numbers:                               Numbers.              (line  6)
* Pairs:                                 Pairs.                (line  6)
* Rational numbers:                      Reals and Rationals.  (line  6)
* Real numbers:                          Reals and Rationals.  (line  6)
* Regular expressions:                   Regular Expressions.  (line  6)
* SCM:                                   Unpacking the SCM type.
                                                               (line 18)
* scm_t_bits:                            Unpacking the SCM type.
                                                               (line 26)
* scm_t_c_hook:                          C Hooks.              (line 24)
* scm_t_c_hook_function:                 C Hooks.              (line 69)
* scm_t_c_hook_type:                     C Hooks.              (line 28)
* Strings:                               Strings.              (line  6)
* Structures:                            Structures.           (line  6)
* Symbols:                               Symbols.              (line  6)
* Uniform Arrays:                        Uniform Arrays.       (line  6)
* Variables:                             Variables.            (line  6)
* Vectors:                               Vectors.              (line  6)


File: guile.info,  Node: R5RS Index,  Prev: Type Index,  Up: Top

R5RS Index
**********

 [index ]
* Menu:

* *:                                     Arithmetic.          (line   6)
* +:                                     Arithmetic.          (line   6)
* -:                                     Arithmetic.          (line   6)
* /:                                     Arithmetic.          (line   6)
* abs:                                   Arithmetic.          (line   6)
* acos:                                  Scientific.          (line  27)
* angle:                                 Complex.             (line   6)
* append:                                Append/Reverse.      (line  13)
* apply:                                 Fly Evaluation.      (line  39)
* asin:                                  Scientific.          (line  24)
* assoc:                                 Retrieving Alist Entries.
                                                              (line   6)
* assq:                                  Retrieving Alist Entries.
                                                              (line   6)
* assv:                                  Retrieving Alist Entries.
                                                              (line   6)
* atan:                                  Scientific.          (line  30)
* boolean?:                              Booleans.            (line  65)
* call-with-current-continuation:        Continuations.       (line  24)
* call-with-input-file:                  File Ports.          (line  59)
* call-with-output-file:                 File Ports.          (line  71)
* call-with-values:                      Multiple Values.     (line  28)
* car:                                   Pairs.               (line  62)
* cdr:                                   Pairs.               (line  62)
* ceiling:                               Arithmetic.          (line   6)
* char->integer:                         Characters.          (line 112)
* char-alphabetic?:                      Characters.          (line  81)
* char-ci<=?:                            Characters.          (line  69)
* char-ci<?:                             Characters.          (line  65)
* char-ci=?:                             Characters.          (line  61)
* char-ci>=?:                            Characters.          (line  77)
* char-ci>?:                             Characters.          (line  73)
* char-downcase:                         Characters.          (line 125)
* char-lower-case?:                      Characters.          (line 101)
* char-numeric?:                         Characters.          (line  86)
* char-ready?:                           Reading.             (line  12)
* char-upcase:                           Characters.          (line 121)
* char-upper-case?:                      Characters.          (line  96)
* char-whitespace?:                      Characters.          (line  91)
* char<=?:                               Characters.          (line  49)
* char<?:                                Characters.          (line  46)
* char=?:                                Characters.          (line  43)
* char>=?:                               Characters.          (line  57)
* char>?:                                Characters.          (line  53)
* char?:                                 Characters.          (line  39)
* close-input-port:                      Closing.             (line  14)
* close-output-port:                     Closing.             (line  23)
* complex?:                              Complex Numbers.     (line   6)
* cons:                                  Pairs.               (line  45)
* cos:                                   Scientific.          (line  18)
* current-input-port:                    Default Ports.       (line   6)
* current-output-port:                   Default Ports.       (line  12)
* display:                               Writing.             (line  13)
* dynamic-wind:                          Dynamic Wind.        (line   9)
* eof-object?:                           Reading.             (line   8)
* eq?:                                   Equality.            (line  21)
* equal?:                                Equality.            (line  33)
* eqv?:                                  Equality.            (line  26)
* eval:                                  Fly Evaluation.      (line   8)
* even?:                                 Integer Operations.  (line   6)
* exact->inexact:                        Exactness.           (line   6)
* exact?:                                Exactness.           (line   6)
* exp:                                   Scientific.          (line  33)
* expt:                                  Scientific.          (line  12)
* floor:                                 Arithmetic.          (line   6)
* for-each:                              List Mapping.        (line  24)
* force:                                 Delayed Evaluation.  (line  13)
* gcd:                                   Integer Operations.  (line   6)
* imag-part:                             Complex.             (line   6)
* inexact->exact:                        Exactness.           (line   6)
* inexact?:                              Exactness.           (line   6)
* input-port?:                           Ports.               (line  20)
* integer->char:                         Characters.          (line 117)
* integer?:                              Integers.            (line   6)
* interaction-environment:               Fly Evaluation.      (line  15)
* lcm:                                   Integer Operations.  (line   6)
* length:                                List Selection.      (line   9)
* list:                                  List Constructors.   (line  11)
* list->string:                          String Constructors. (line   9)
* list->vector:                          Vector Creation.     (line  12)
* list-ref:                              List Selection.      (line  18)
* list-tail:                             List Selection.      (line  22)
* list?:                                 List Predicates.     (line  11)
* load:                                  Loading.             (line   6)
* log:                                   Scientific.          (line  37)
* magnitude:                             Complex.             (line   6)
* make-polar:                            Complex.             (line   6)
* make-rectangular:                      Complex.             (line   6)
* make-string:                           String Constructors. (line  14)
* make-vector:                           Vector Creation.     (line  40)
* map:                                   List Mapping.        (line  13)
* max:                                   Arithmetic.          (line   6)
* member:                                List Searching.      (line  26)
* memq:                                  List Searching.      (line  12)
* memv:                                  List Searching.      (line  19)
* min:                                   Arithmetic.          (line   6)
* modulo:                                Integer Operations.  (line   6)
* negative?:                             Comparison.          (line   6)
* newline:                               Writing.             (line  21)
* not:                                   Booleans.            (line  58)
* null?:                                 List Predicates.     (line  20)
* number->string:                        Conversion.          (line   6)
* number?:                               Numerical Tower.     (line   6)
* odd?:                                  Integer Operations.  (line   6)
* open-input-file:                       File Ports.          (line  51)
* open-output-file:                      File Ports.          (line  55)
* output-port?:                          Ports.               (line  25)
* pair?:                                 Pairs.               (line  51)
* peek-char?:                            Reading.             (line  25)
* positive?:                             Comparison.          (line   6)
* procedure?:                            Procedure Properties.
                                                              (line  20)
* quotient:                              Integer Operations.  (line   6)
* rational?:                             Reals and Rationals. (line   6)
* read:                                  Scheme Read.         (line   6)
* read-char?:                            Reading.             (line  19)
* real-part:                             Complex.             (line   6)
* real?:                                 Reals and Rationals. (line   6)
* remainder:                             Integer Operations.  (line   6)
* reverse:                               Append/Reverse.      (line  34)
* round:                                 Arithmetic.          (line   6)
* set-car!:                              Pairs.               (line  75)
* set-cdr!:                              Pairs.               (line  80)
* sin:                                   Scientific.          (line  15)
* sqrt:                                  Scientific.          (line   9)
* string:                                String Constructors. (line   9)
* string->list:                          List/String Conversion.
                                                              (line  11)
* string->number:                        Conversion.          (line   6)
* string->symbol:                        Symbol Primitives.   (line  45)
* string-append:                         Appending Strings.   (line   9)
* string-ci<:                            String Comparison.   (line  41)
* string-ci=?:                           String Comparison.   (line  36)
* string-ci>=?:                          String Comparison.   (line  54)
* string-ci>?:                           String Comparison.   (line  50)
* string-copy:                           String Selection.    (line  19)
* string-fill!:                          String Modification. (line  15)
* string-length:                         String Selection.    (line  10)
* string-ref:                            String Selection.    (line  14)
* string-set!:                           String Modification. (line  10)
* string<=?:                             String Comparison.   (line  24)
* string<?:                              String Comparison.   (line  20)
* string=?:                              String Comparison.   (line  11)
* string>=?:                             String Comparison.   (line  32)
* string>?:                              String Comparison.   (line  28)
* string?:                               String Predicates.   (line   9)
* substring:                             String Selection.    (line  23)
* symbol->string:                        Symbol Primitives.   (line  18)
* symbol?:                               Symbol Primitives.   (line   9)
* tan:                                   Scientific.          (line  21)
* truncate:                              Arithmetic.          (line   6)
* values:                                Multiple Values.     (line  20)
* vector:                                Vector Creation.     (line  12)
* vector->list:                          Vector Creation.     (line  28)
* vector-fill!:                          Vector Accessors.    (line  42)
* vector-length:                         Vector Accessors.    (line  10)
* vector-ref:                            Vector Accessors.    (line  14)
* vector-set!:                           Vector Accessors.    (line  34)
* vector?:                               Vector Creation.     (line  49)
* with-input-from-file:                  File Ports.          (line  83)
* with-output-to-file:                   File Ports.          (line  94)
* write-char:                            Writing.             (line  47)
* zero?:                                 Comparison.          (line   6)


